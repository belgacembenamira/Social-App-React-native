{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from \"./BaseRouter\";\nvar TYPE_ROUTE = 'route';\nexport var TabActions = {\n  jumpTo: function jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  }\n};\nvar getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {\n  var history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  var initialRouteIndex;\n  switch (backBehavior) {\n    case 'order':\n      for (var i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(function (route) {\n        return route.name === initialRouteName;\n      });\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n      if (initialRouteIndex !== index) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n      break;\n    case 'history':\n      break;\n  }\n  return history;\n};\nvar changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {\n  var history;\n  if (backBehavior === 'history') {\n    var currentKey = state.routes[index].key;\n    history = state.history.filter(function (it) {\n      return it.type === 'route' ? it.key !== currentKey : false;\n    }).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    index: index,\n    history: history\n  });\n};\nexport default function TabRouter(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n    _ref$backBehavior = _ref.backBehavior,\n    backBehavior = _ref$backBehavior === void 0 ? 'history' : _ref$backBehavior;\n  var router = _objectSpread(_objectSpread({}, BaseRouter), {}, {\n    type: 'tab',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n        routeParamList = _ref2.routeParamList;\n      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      var routes = routeNames.map(function (name) {\n        return {\n          name: name,\n          key: \"\".concat(name, \"-\").concat(nanoid()),\n          params: routeParamList[name]\n        };\n      });\n      var history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: \"tab-\".concat(nanoid()),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n        routeParamList = _ref3.routeParamList;\n      var _state$history, _history;\n      var state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      var routes = routeNames.map(function (name) {\n        var route = state.routes.find(function (r) {\n          return r.name === name;\n        });\n        return _objectSpread(_objectSpread({}, route), {}, {\n          name: name,\n          key: route && route.name === name && route.key ? route.key : \"\".concat(name, \"-\").concat(nanoid()),\n          params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), route ? route.params : undefined) : route ? route.params : undefined\n        });\n      });\n      var index = Math.min(Math.max(typeof state.index === 'number' ? state.index : routeNames.indexOf(state.routes[0].name), 0), routes.length - 1);\n      var history = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(function (it) {\n        return routes.find(function (r) {\n          return r.key === it.key;\n        });\n      });\n      if (!((_history = history) === null || _history === void 0 ? void 0 : _history.length)) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n      return {\n        stale: false,\n        type: 'tab',\n        key: \"tab-\".concat(nanoid()),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      };\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {\n      var routeNames = _ref4.routeNames,\n        routeParamList = _ref4.routeParamList;\n      var routes = routeNames.map(function (name) {\n        return state.routes.find(function (r) {\n          return r.name === name;\n        }) || {\n          name: name,\n          key: \"\".concat(name, \"-\").concat(nanoid()),\n          params: routeParamList[name]\n        };\n      });\n      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      var history = state.history.filter(function (it) {\n        return routes.find(function (r) {\n          return r.key === it.key;\n        });\n      });\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        history: history,\n        routeNames: routeNames,\n        routes: routes,\n        index: index\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n    getStateForAction: function getStateForAction(state, action) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var index = -1;\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(function (route) {\n                return route.key === action.payload.key;\n              });\n            } else {\n              index = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name;\n              });\n            }\n            if (index === -1) {\n              return null;\n            }\n            return changeIndex(_objectSpread(_objectSpread({}, state), {}, {\n              routes: action.payload.params !== undefined ? state.routes.map(function (route, i) {\n                return i === index ? _objectSpread(_objectSpread({}, route), {}, {\n                  params: _objectSpread(_objectSpread({}, route.params), action.payload.params)\n                }) : route;\n              }) : state.routes\n            }), index, backBehavior, initialRouteName);\n          }\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n            var previousKey = state.history[state.history.length - 2].key;\n            var _index = state.routes.findIndex(function (route) {\n              return route.key === previousKey;\n            });\n            if (_index === -1) {\n              return null;\n            }\n            return _objectSpread(_objectSpread({}, state), {}, {\n              history: state.history.slice(0, -1),\n              index: _index\n            });\n          }\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    shouldActionChangeFocus: function shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n    actionCreators: TabActions\n  });\n  return router;\n}","map":{"version":3,"names":["nanoid","BaseRouter","TYPE_ROUTE","TabActions","jumpTo","name","params","type","payload","getRouteHistory","routes","index","backBehavior","initialRouteName","history","key","initialRouteIndex","i","unshift","findIndex","route","changeIndex","state","currentKey","filter","it","concat","_objectSpread","TabRouter","_ref","_ref$backBehavior","router","getInitialState","_ref2","routeNames","routeParamList","undefined","includes","indexOf","map","stale","getRehydratedState","partialState","_ref3","_state$history","_history","find","r","Math","min","max","length","getStateForRouteNamesChange","_ref4","getStateForRouteFocus","getStateForAction","action","previousKey","slice","shouldActionChangeFocus","actionCreators"],"sources":["C:\\Users\\belgacem\\OneDrive\\Bureau\\projet02\\SocialApp-React-Native\\node_modules\\@react-navigation\\routers\\lib\\module\\TabRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nimport type {\n  NavigationState,\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  DefaultRouterOptions,\n  Route,\n  ParamListBase,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior = 'initialRoute' | 'order' | 'history' | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState = Omit<NavigationState, 'history'> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(\n        (route) => route.name === initialRouteName\n      );\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (initialRouteIndex !== index) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key,\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState,\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(\n      state.routes,\n      index,\n      backBehavior,\n      initialRouteName\n    );\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'history',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(\n        routes,\n        index,\n        backBehavior,\n        initialRouteName\n      );\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (state as PartialState<TabNavigationState>).routes.find(\n          (r) => r.name === name\n        );\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${nanoid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(\n          typeof state.index === 'number'\n            ? state.index\n            : routeNames.indexOf(state.routes[0].name),\n          0\n        ),\n        routes.length - 1\n      );\n\n      let history = state.history?.filter((it) =>\n        routes.find((r) => r.key === it.key)\n      );\n\n      if (!history?.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find((r) => r.name === name) || {\n            name,\n            key: `${name}-${nanoid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter((it) =>\n        routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              (route) => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              (route) => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes:\n                action.payload.params !== undefined\n                  ? state.routes.map((route, i) =>\n                      i === index\n                        ? {\n                            ...route,\n                            params: {\n                              ...route.params,\n                              ...action.payload.params,\n                            },\n                          }\n                        : route\n                    )\n                  : state.routes,\n            },\n            index,\n            backBehavior,\n            initialRouteName\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}