{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nexport default function useOnAction(_ref) {\n  var router = _ref.router,\n    getState = _ref.getState,\n    setState = _ref.setState,\n    key = _ref.key,\n    listeners = _ref.listeners,\n    routerConfigOptions = _ref.routerConfigOptions;\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n    onActionParent = _React$useContext.onAction,\n    onRouteFocusParent = _React$useContext.onRouteFocus,\n    addActionListenerParent = _React$useContext.addActionListener,\n    onDispatchAction = _React$useContext.onDispatchAction;\n  var routerConfigOptionsRef = React.useRef(routerConfigOptions);\n  React.useEffect(function () {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n  var onAction = React.useCallback(function (action) {\n    var visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    var state = getState();\n    if (visitedNavigators.has(state.key)) {\n      return false;\n    }\n    visitedNavigators.add(state.key);\n    if (typeof action.target === 'string' && action.target !== state.key) {\n      return false;\n    }\n    var result = router.getStateForAction(state, action, routerConfigOptionsRef.current);\n    result = result === null && action.target === state.key ? state : result;\n    if (result !== null) {\n      onDispatchAction(action, state === result);\n      if (state !== result) {\n        setState(result);\n      }\n      if (onRouteFocusParent !== undefined) {\n        var shouldFocus = router.shouldActionChangeFocus(action);\n        if (shouldFocus && key !== undefined) {\n          onRouteFocusParent(key);\n        }\n      }\n      return true;\n    }\n    if (onActionParent !== undefined) {\n      if (onActionParent(action, visitedNavigators)) {\n        return true;\n      }\n    }\n    for (var i = listeners.length - 1; i >= 0; i--) {\n      var listener = listeners[i];\n      if (listener(action, visitedNavigators)) {\n        return true;\n      }\n    }\n    return false;\n  }, [getState, router, onActionParent, onDispatchAction, onRouteFocusParent, setState, key, listeners]);\n  React.useEffect(function () {\n    return addActionListenerParent === null || addActionListenerParent === void 0 ? void 0 : addActionListenerParent(onAction);\n  }, [addActionListenerParent, onAction]);\n  return onAction;\n}","map":{"version":3,"names":["React","NavigationBuilderContext","useOnAction","_ref","router","getState","setState","key","listeners","routerConfigOptions","_React$useContext","useContext","onActionParent","onAction","onRouteFocusParent","onRouteFocus","addActionListenerParent","addActionListener","onDispatchAction","routerConfigOptionsRef","useRef","useEffect","current","useCallback","action","visitedNavigators","arguments","length","undefined","Set","state","has","add","target","result","getStateForAction","shouldFocus","shouldActionChangeFocus","i","listener"],"sources":["C:\\Users\\belgacem\\OneDrive\\Bureau\\projet02\\SocialApp-React-Native\\node_modules\\@react-navigation\\core\\lib\\module\\useOnAction.tsx"],"sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  PartialState,\n  Router,\n  RouterConfigOptions,\n} from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  ChildActionListener,\n} from './NavigationBuilderContext';\n\ntype Options = {\n  router: Router<NavigationState, NavigationAction>;\n  key?: string;\n  getState: () => NavigationState;\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\n  listeners: ChildActionListener[];\n  routerConfigOptions: RouterConfigOptions;\n};\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  listeners,\n  routerConfigOptions,\n}: Options) {\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addActionListener: addActionListenerParent,\n    onDispatchAction,\n  } = React.useContext(NavigationBuilderContext);\n\n  const routerConfigOptionsRef = React.useRef<RouterConfigOptions>(\n    routerConfigOptions\n  );\n\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n\n  const onAction = React.useCallback(\n    (\n      action: NavigationAction,\n      visitedNavigators: Set<string> = new Set<string>()\n    ) => {\n      const state = getState();\n\n      // Since actions can bubble both up and down, they could come to the same navigator again\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\n      if (visitedNavigators.has(state.key)) {\n        return false;\n      }\n\n      visitedNavigators.add(state.key);\n\n      if (typeof action.target === 'string' && action.target !== state.key) {\n        return false;\n      }\n\n      let result = router.getStateForAction(\n        state,\n        action,\n        routerConfigOptionsRef.current\n      );\n\n      // If a target is specified and set to current navigator, the action shouldn't bubble\n      // So instead of `null`, we use the state object for such cases to signal that action was handled\n      result = result === null && action.target === state.key ? state : result;\n\n      if (result !== null) {\n        onDispatchAction(action, state === result);\n\n        if (state !== result) {\n          setState(result);\n        }\n\n        if (onRouteFocusParent !== undefined) {\n          // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n          // This means we need to focus all of the parent navigators of this navigator as well\n          const shouldFocus = router.shouldActionChangeFocus(action);\n\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n\n        return true;\n      }\n\n      if (onActionParent !== undefined) {\n        // Bubble action to the parent if the current navigator didn't handle it\n        if (onActionParent(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n      for (let i = listeners.length - 1; i >= 0; i--) {\n        const listener = listeners[i];\n\n        if (listener(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    [\n      getState,\n      router,\n      onActionParent,\n      onDispatchAction,\n      onRouteFocusParent,\n      setState,\n      key,\n      listeners,\n    ]\n  );\n\n  React.useEffect(() => addActionListenerParent?.(onAction), [\n    addActionListenerParent,\n    onAction,\n  ]);\n\n  return onAction;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}