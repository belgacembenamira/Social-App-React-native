{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport isArrayEqual from \"./isArrayEqual\";\nexport default function useOnGetState(_ref) {\n  var getStateForRoute = _ref.getStateForRoute,\n    getState = _ref.getState;\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n    addStateGetter = _React$useContext.addStateGetter;\n  var route = React.useContext(NavigationRouteContext);\n  var key = route ? route.key : 'root';\n  var getRehydratedState = React.useCallback(function () {\n    var state = getState();\n    var routes = state.routes.map(function (route) {\n      var childState = getStateForRoute(route.key);\n      if (route.state === childState) {\n        return route;\n      }\n      return _objectSpread(_objectSpread({}, route), {}, {\n        state: childState\n      });\n    });\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n    return _objectSpread(_objectSpread({}, state), {}, {\n      routes: routes\n    });\n  }, [getState, getStateForRoute]);\n  React.useEffect(function () {\n    return addStateGetter === null || addStateGetter === void 0 ? void 0 : addStateGetter(key, getRehydratedState);\n  }, [addStateGetter, getRehydratedState, key]);\n}","map":{"version":3,"names":["React","NavigationBuilderContext","NavigationRouteContext","isArrayEqual","useOnGetState","_ref","getStateForRoute","getState","_React$useContext","useContext","addStateGetter","route","key","getRehydratedState","useCallback","state","routes","map","childState","_objectSpread","useEffect"],"sources":["C:\\Users\\belgacem\\OneDrive\\Bureau\\projet02\\SocialApp-React-Native\\node_modules\\@react-navigation\\core\\lib\\module\\useOnGetState.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport isArrayEqual from './isArrayEqual';\n\nexport default function useOnGetState({\n  getStateForRoute,\n  getState,\n}: {\n  getStateForRoute: (routeName: string) => NavigationState | undefined;\n  getState: () => NavigationState;\n}) {\n  const { addStateGetter } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateForRoute(route.key);\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateForRoute]);\n\n  React.useEffect(() => {\n    return addStateGetter?.(key, getRehydratedState);\n  }, [addStateGetter, getRehydratedState, key]);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,wBAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,YAAP;AAEA,eAAe,SAASC,aAATA,CAAAC,IAAA,EAMZ;EAAA,IALDC,gBADoC,GAAAD,IAAA,CACpCC,gBADoC;IAEpCC,QAAA,GAAAF,IAAA,CAAAE,QAAA;EAAA,IAAAC,iBAAA,GAK2BR,KAAK,CAACS,UAAN,CAAiBR,wBAAjB,CAA3B;IAAQS,cAAA,GAAAF,iBAAA,CAAAE,cAAA;EACR,IAAMC,KAAK,GAAGX,KAAK,CAACS,UAAN,CAAiBP,sBAAjB,CAAd;EACA,IAAMU,GAAG,GAAGD,KAAK,GAAGA,KAAK,CAACC,GAAT,GAAe,MAAhC;EAEA,IAAMC,kBAAkB,GAAGb,KAAK,CAACc,WAAN,CAAkB,YAAM;IACjD,IAAMC,KAAK,GAAGR,QAAQ,EAAtB;IAGA,IAAMS,MAAM,GAAGD,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAkB,UAAAN,KAAD,EAAW;MACzC,IAAMO,UAAU,GAAGZ,gBAAgB,CAACK,KAAK,CAACC,GAAP,CAAnC;MAEA,IAAID,KAAK,CAACI,KAAN,KAAgBG,UAApB,EAAgC;QAC9B,OAAOP,KAAP;MACD;MAED,OAAAQ,aAAA,CAAAA,aAAA,KAAYR,KAAZ;QAAmBI,KAAK,EAAEG;MAA1B;IACD,CARc,CAAf;IAUA,IAAIf,YAAY,CAACY,KAAK,CAACC,MAAP,EAAeA,MAAf,CAAhB,EAAwC;MACtC,OAAOD,KAAP;IACD;IAED,OAAAI,aAAA,CAAAA,aAAA,KAAYJ,KAAZ;MAAmBC,MAAA,EAAAA;IAAnB;EACD,CAnB0B,EAmBxB,CAACT,QAAD,EAAWD,gBAAX,CAnBwB,CAA3B;EAqBAN,KAAK,CAACoB,SAAN,CAAgB,YAAM;IACpB,OAAOV,cAAP,aAAOA,cAAP,uBAAOA,cAAc,CAAGE,GAAH,EAAQC,kBAAR,CAArB;EACD,CAFD,EAEG,CAACH,cAAD,EAAiBG,kBAAjB,EAAqCD,GAArC,CAFH;AAGD"},"metadata":{},"sourceType":"module","externalDependencies":[]}