{"ast":null,"code":"import { lessThan, multiply, sub, add, divide, greaterThan, lessOrEq, eq } from \"../operators\";\nimport invariant from 'fbjs/lib/invariant';\nimport AnimatedNode from \"../core/AnimatedNode\";\nimport { createAnimatedCond as cond } from \"../core/AnimatedCond\";\nimport { createAnimatedFunction as proc } from \"../core/AnimatedFunction\";\nvar interpolateInternalSingleProc = proc(function (value, inS, inE, outS, outE) {\n  var progress = divide(sub(value, inS), sub(inE, inS));\n  var resultForNonZeroRange = add(outS, multiply(progress, sub(outE, outS)));\n  var result = cond(eq(inS, inE), cond(lessOrEq(value, inS), outS, outE), resultForNonZeroRange);\n  return result;\n});\nfunction interpolateInternalSingle(value, inputRange, outputRange, offset) {\n  var inS = inputRange[offset];\n  var inE = inputRange[offset + 1];\n  var outS = outputRange[offset];\n  var outE = outputRange[offset + 1];\n  return interpolateInternalSingleProc(value, inS, inE, outS, outE);\n}\nfunction interpolateInternal(value, inputRange, outputRange) {\n  var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  if (inputRange.length - offset === 2) {\n    return interpolateInternalSingle(value, inputRange, outputRange, offset);\n  }\n  return cond(lessThan(value, inputRange[offset + 1]), interpolateInternalSingle(value, inputRange, outputRange, offset), interpolateInternal(value, inputRange, outputRange, offset + 1));\n}\nexport var Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity'\n};\nfunction checkNonDecreasing(name, arr) {\n  for (var i = 1; i < arr.length; ++i) {\n    if (arr[i] instanceof AnimatedNode || arr[i - 1] instanceof AnimatedNode) continue;\n    invariant(arr[i] >= arr[i - 1], '%s must be monotonically non-decreasing. (%s)', name, arr);\n  }\n}\nfunction checkMinElements(name, arr) {\n  invariant(arr.length >= 2, '%s must have at least 2 elements. (%s)', name, arr);\n}\nfunction checkValidNumbers(name, arr) {\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] instanceof AnimatedNode) continue;\n    invariant(Number.isFinite(arr[i]), '%s cannot include %s. (%s)', name, arr[i], arr);\n  }\n}\nexport default function interpolate(value, config) {\n  var inputRange = config.inputRange,\n    outputRange = config.outputRange,\n    _config$extrapolate = config.extrapolate,\n    extrapolate = _config$extrapolate === void 0 ? Extrapolate.EXTEND : _config$extrapolate,\n    extrapolateLeft = config.extrapolateLeft,\n    extrapolateRight = config.extrapolateRight;\n  checkMinElements('inputRange', inputRange);\n  checkValidNumbers('inputRange', inputRange);\n  checkMinElements('outputRange', outputRange);\n  checkValidNumbers('outputRange', outputRange);\n  checkNonDecreasing('inputRange', inputRange);\n  invariant(inputRange.length === outputRange.length, 'inputRange and outputRange must be the same length.');\n  var left = extrapolateLeft || extrapolate;\n  var right = extrapolateRight || extrapolate;\n  var output = interpolateInternal(value, inputRange, outputRange);\n  if (left === Extrapolate.EXTEND) {} else if (left === Extrapolate.CLAMP) {\n    output = cond(lessThan(value, inputRange[0]), outputRange[0], output);\n  } else if (left === Extrapolate.IDENTITY) {\n    output = cond(lessThan(value, inputRange[0]), value, output);\n  }\n  if (right === Extrapolate.EXTEND) {} else if (right === Extrapolate.CLAMP) {\n    output = cond(greaterThan(value, inputRange[inputRange.length - 1]), outputRange[outputRange.length - 1], output);\n  } else if (right === Extrapolate.IDENTITY) {\n    output = cond(greaterThan(value, inputRange[inputRange.length - 1]), value, output);\n  }\n  return output;\n}","map":{"version":3,"names":["lessThan","multiply","sub","add","divide","greaterThan","lessOrEq","eq","invariant","AnimatedNode","createAnimatedCond","cond","createAnimatedFunction","proc","interpolateInternalSingleProc","value","inS","inE","outS","outE","progress","resultForNonZeroRange","result","interpolateInternalSingle","inputRange","outputRange","offset","interpolateInternal","arguments","length","undefined","Extrapolate","EXTEND","CLAMP","IDENTITY","checkNonDecreasing","name","arr","i","checkMinElements","checkValidNumbers","Number","isFinite","interpolate","config","_config$extrapolate","extrapolate","extrapolateLeft","extrapolateRight","left","right","output"],"sources":["C:/Users/belgacem/OneDrive/Bureau/projet02/SocialApp-React-Native/node_modules/react-native-reanimated/src/derived/interpolate.js"],"sourcesContent":["import {\n  lessThan,\n  multiply,\n  sub,\n  add,\n  divide,\n  greaterThan,\n  lessOrEq,\n  eq,\n} from '../operators';\nimport invariant from 'fbjs/lib/invariant';\n\nimport AnimatedNode from '../core/AnimatedNode';\nimport { createAnimatedCond as cond } from '../core/AnimatedCond';\nimport { createAnimatedFunction as proc } from '../core/AnimatedFunction';\n\nconst interpolateInternalSingleProc = proc(function(\n  value,\n  inS,\n  inE,\n  outS,\n  outE\n) {\n  const progress = divide(sub(value, inS), sub(inE, inS));\n  // logic below was made in order to provide a compatibility witn an Animated API\n  const resultForNonZeroRange = add(outS, multiply(progress, sub(outE, outS)));\n  const result = cond(eq(inS, inE), cond(lessOrEq(value, inS), outS, outE), resultForNonZeroRange);\n  return result;\n});\n\nfunction interpolateInternalSingle(value, inputRange, outputRange, offset) {\n  const inS = inputRange[offset];\n  const inE = inputRange[offset + 1];\n  const outS = outputRange[offset];\n  const outE = outputRange[offset + 1];\n  return interpolateInternalSingleProc(value, inS, inE, outS, outE);\n}\n\nfunction interpolateInternal(value, inputRange, outputRange, offset = 0) {\n  if (inputRange.length - offset === 2) {\n    return interpolateInternalSingle(value, inputRange, outputRange, offset);\n  }\n  return cond(\n    lessThan(value, inputRange[offset + 1]),\n    interpolateInternalSingle(value, inputRange, outputRange, offset),\n    interpolateInternal(value, inputRange, outputRange, offset + 1)\n  );\n}\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nfunction checkNonDecreasing(name, arr) {\n  for (let i = 1; i < arr.length; ++i) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode || arr[i - 1] instanceof AnimatedNode)\n      continue;\n    invariant(\n      arr[i] >= arr[i - 1],\n      '%s must be monotonically non-decreasing. (%s)',\n      name,\n      arr\n    );\n  }\n}\n\nfunction checkMinElements(name, arr) {\n  invariant(\n    arr.length >= 2,\n    '%s must have at least 2 elements. (%s)',\n    name,\n    arr\n  );\n}\n\nfunction checkValidNumbers(name, arr) {\n  for (let i = 0; i < arr.length; i++) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode) continue;\n    invariant(\n      Number.isFinite(arr[i]),\n      '%s cannot include %s. (%s)',\n      name,\n      arr[i],\n      arr\n    );\n  }\n}\n\nexport default function interpolate(value, config) {\n  const {\n    inputRange,\n    outputRange,\n    extrapolate = Extrapolate.EXTEND,\n    extrapolateLeft,\n    extrapolateRight,\n  } = config;\n  checkMinElements('inputRange', inputRange);\n  checkValidNumbers('inputRange', inputRange);\n  checkMinElements('outputRange', outputRange);\n  checkValidNumbers('outputRange', outputRange);\n  checkNonDecreasing('inputRange', inputRange);\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange and outputRange must be the same length.'\n  );\n\n  const left = extrapolateLeft || extrapolate;\n  const right = extrapolateRight || extrapolate;\n  let output = interpolateInternal(value, inputRange, outputRange);\n\n  if (left === Extrapolate.EXTEND) {\n  } else if (left === Extrapolate.CLAMP) {\n    output = cond(lessThan(value, inputRange[0]), outputRange[0], output);\n  } else if (left === Extrapolate.IDENTITY) {\n    output = cond(lessThan(value, inputRange[0]), value, output);\n  }\n\n  if (right === Extrapolate.EXTEND) {\n  } else if (right === Extrapolate.CLAMP) {\n    output = cond(\n      greaterThan(value, inputRange[inputRange.length - 1]),\n      outputRange[outputRange.length - 1],\n      output\n    );\n  } else if (right === Extrapolate.IDENTITY) {\n    output = cond(\n      greaterThan(value, inputRange[inputRange.length - 1]),\n      value,\n      output\n    );\n  }\n\n  return output;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}