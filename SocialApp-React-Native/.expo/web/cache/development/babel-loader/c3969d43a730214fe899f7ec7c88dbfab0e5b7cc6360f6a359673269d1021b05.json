{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\belgacem\\\\OneDrive\\\\Bureau\\\\projet02\\\\SocialApp-React-Native\\\\screens\\\\chat\\\\ChatScreen.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport * as chatActions from \"../../store/actions/chat\";\nimport socketIO from 'socket.io-client';\nimport ENV from \"../../env\";\nimport { Octicons } from '@expo/vector-icons';\nimport Colors from \"../../constants/Colors\";\nimport VerifiedUser from \"../../constants/VerifiedUser\";\nvar socket;\nvar ChatScreen = function ChatScreen(props) {\n  var dispatch = useDispatch();\n  var route = props.route;\n  var user = route.params.user;\n  var userId = user._id;\n  var loggedUser = useSelector(function (state) {\n    return state.auth.user;\n  });\n  var chats = useSelector(function (state) {\n    return state.chat.allChats;\n  });\n  var currChats = chats.filter(function (c) {\n    return c.sender._id === loggedUser._id && c.reciever._id === userId || c.sender._id === userId && c.reciever._id === loggedUser._id;\n  });\n  var resultChats = currChats.map(function (c) {\n    return {\n      _id: c._id,\n      text: c.message,\n      createdAt: new Date(c.time),\n      user: {\n        _id: c.sender._id,\n        name: c.sender.name\n      }\n    };\n  }).reverse();\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    text = _useState2[0],\n    setText = _useState2[1];\n  var _useState3 = useState(resultChats),\n    _useState4 = _slicedToArray(_useState3, 2),\n    messages = _useState4[0],\n    setMessages = _useState4[1];\n  var sendPushNotification = function sendPushNotification(userName, text) {\n    var message, response, res;\n    return _regeneratorRuntime.async(function sendPushNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            message = {\n              to: user.notificationToken,\n              sound: 'default',\n              title: \"New message from \" + userName,\n              body: text,\n              data: {\n                data: 'goes here'\n              },\n              _displayInForeground: true\n            };\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send', {\n              method: 'POST',\n              headers: {\n                Accept: 'application/json',\n                'Accept-encoding': 'gzip, deflate',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(message)\n            }));\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n          case 6:\n            res = _context.sent;\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n  useEffect(function () {\n    socket = socketIO.connect(ENV.apiUrl);\n    socket.on('connect', function () {\n      console.log('connected chat screen');\n      socket.emit('userInfo', loggedUser);\n    });\n  }, []);\n  useEffect(function () {\n    socket.on('message', function (newChat) {\n      console.log(\"New message\");\n      if (newChat.sender._id === loggedUser._id || newChat.sender._id === userId) {\n        var giftedNewChat = {\n          _id: newChat._id,\n          text: newChat.message,\n          createdAt: new Date(newChat.time),\n          user: {\n            _id: newChat.sender._id,\n            name: newChat.sender.name\n          }\n        };\n        setMessages(function (previousMessages) {\n          return GiftedChat.append(previousMessages, giftedNewChat);\n        });\n      }\n      dispatch(chatActions.addChat(newChat));\n    });\n  }, [setMessages]);\n  var _onSend = useCallback(function () {\n    var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    socket.emit('sendMessage', messages[0].text, loggedUser, user, function () {\n      console.log(\"NOTIFICATION PUSHING to\", user.name);\n      sendPushNotification(loggedUser.name, messages[0].text);\n      setText('');\n    });\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: '#fff'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, React.createElement(GiftedChat, {\n    text: text,\n    onInputTextChanged: function onInputTextChanged(text) {\n      return setText(text);\n    },\n    messages: messages,\n    onSend: function onSend(messages) {\n      return _onSend(messages);\n    },\n    user: {\n      _id: loggedUser._id\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }));\n};\nexport var screenOptions = function screenOptions(navData) {\n  var routeParams = navData.route.params;\n  return {\n    headerTitle: function headerTitle() {\n      return React.createElement(Text, {\n        style: {\n          color: \"#fff\",\n          fontSize: 20,\n          fontWeight: \"600\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }\n      }, routeParams.user.name + \" \", VerifiedUser.verifiedUsersId.includes(routeParams.user._id) && React.createElement(Octicons, {\n        name: \"verified\",\n        size: 18,\n        color: \"#fff\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 84\n        }\n      }));\n    }\n  };\n};\nexport default ChatScreen;","map":{"version":3,"names":["React","useState","useCallback","useEffect","View","Text","useDispatch","useSelector","GiftedChat","chatActions","socketIO","ENV","Octicons","Colors","VerifiedUser","socket","ChatScreen","props","dispatch","route","user","params","userId","_id","loggedUser","state","auth","chats","chat","allChats","currChats","filter","c","sender","reciever","resultChats","map","text","message","createdAt","Date","time","name","reverse","_useState","_useState2","_slicedToArray","setText","_useState3","_useState4","messages","setMessages","sendPushNotification","userName","response","res","_regeneratorRuntime","async","sendPushNotification$","_context","prev","next","to","notificationToken","sound","title","body","data","_displayInForeground","awrap","fetch","method","headers","Accept","JSON","stringify","sent","json","stop","Promise","connect","apiUrl","on","console","log","emit","newChat","giftedNewChat","previousMessages","append","addChat","onSend","arguments","length","undefined","createElement","style","flex","backgroundColor","__source","fileName","_jsxFileName","lineNumber","columnNumber","onInputTextChanged","screenOptions","navData","routeParams","headerTitle","color","fontSize","fontWeight","verifiedUsersId","includes","size"],"sources":["C:/Users/belgacem/OneDrive/Bureau/projet02/SocialApp-React-Native/screens/chat/ChatScreen.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { GiftedChat } from 'react-native-gifted-chat';\r\n\r\nimport * as chatActions from '../../store/actions/chat';\r\n\r\nimport socketIO from 'socket.io-client';\r\nimport ENV from '../../env';\r\nimport { Octicons } from '@expo/vector-icons'\r\nimport Colors from '../../constants/Colors';\r\nimport VerifiedUser from '../../constants/VerifiedUser';\r\n\r\n\r\nlet socket;\r\n\r\nconst ChatScreen = (props) => {\r\n    const dispatch = useDispatch();\r\n    const { route } = props;\r\n    const user = route.params.user;\r\n    const userId = user._id;\r\n    const loggedUser = useSelector(state => state.auth.user);\r\n\r\n    const chats = useSelector(state => state.chat.allChats);\r\n    const currChats = chats.filter(c => (c.sender._id === loggedUser._id && c.reciever._id === userId) || (c.sender._id === userId && c.reciever._id === loggedUser._id))\r\n    const resultChats = currChats.map(c => {\r\n        return {\r\n            _id: c._id,\r\n            text: c.message,\r\n            createdAt: new Date(c.time),\r\n            user: {\r\n                _id: c.sender._id,\r\n                name: c.sender.name,\r\n            }\r\n        }\r\n    }).reverse();\r\n\r\n    const [text, setText] = useState('');\r\n    const [messages, setMessages] = useState(resultChats);\r\n\r\n    const sendPushNotification = async (userName, text) => {\r\n        const message = {\r\n            to: user.notificationToken,\r\n            sound: 'default',\r\n            title: `New message from ${userName}`,\r\n            body: text,\r\n            data: { data: 'goes here' },\r\n            _displayInForeground: true,\r\n        };\r\n        const response = await fetch('https://exp.host/--/api/v2/push/send', {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Accept-encoding': 'gzip, deflate',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(message),\r\n        });\r\n\r\n        const res = await response.json();\r\n        // console.log(res);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        socket = socketIO.connect(ENV.apiUrl)\r\n        socket.on('connect', () => {\r\n            console.log('connected chat screen')\r\n            socket.emit('userInfo', loggedUser);\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        socket.on('message', (newChat) => {\r\n            console.log(\"New message\");\r\n            // if(newChat.sender._id !== loggedUser._id){\r\n                //push notification\r\n            // }\r\n\r\n            if( newChat.sender._id === loggedUser._id || newChat.sender._id === userId ){\r\n                let giftedNewChat = {\r\n                    _id: newChat._id,\r\n                    text: newChat.message,\r\n                    createdAt: new Date(newChat.time),\r\n                    user: {\r\n                        _id: newChat.sender._id,\r\n                        name: newChat.sender.name\r\n                        // avatar: \r\n                    }\r\n                }\r\n                setMessages(previousMessages => GiftedChat.append(previousMessages, giftedNewChat) )\r\n            }\r\n            dispatch(chatActions.addChat(newChat))\r\n        })\r\n    }, [setMessages])\r\n\r\n    const onSend = useCallback((messages = []) => {\r\n        socket.emit('sendMessage', messages[0].text, loggedUser, user,  () => {\r\n\r\n            console.log(\"NOTIFICATION PUSHING to\", user.name)\r\n            sendPushNotification(loggedUser.name, messages[0].text);\r\n            setText('');\r\n            // setMessages(previousMessages => GiftedChat.append(previousMessages, messages))\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <View style={{ flex: 1, backgroundColor: '#fff' }} >\r\n            <GiftedChat\r\n                text={text}\r\n                onInputTextChanged={text => setText(text)}\r\n                messages={messages}\r\n                onSend={messages => onSend(messages)}\r\n                user={{\r\n                    _id: loggedUser._id,\r\n                }}\r\n                // alwaysShowSend={true}\r\n                // inverted={false}\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\n\r\nexport const screenOptions = (navData) => {\r\n\r\n    const routeParams = navData.route.params;\r\n    return {\r\n        \r\n        headerTitle: () => (\r\n            <Text\r\n                style={{ color: \"#fff\", fontSize: 20, fontWeight: \"600\" }}\r\n            >\r\n                {routeParams.user.name + \" \"}\r\n                {\r\n                    VerifiedUser.verifiedUsersId.includes(routeParams.user._id) && <Octicons name=\"verified\" size={18} color=\"#fff\" />\r\n                }\r\n            </Text>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}