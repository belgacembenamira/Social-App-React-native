{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport Animated, { Easing as OldEasing, EasingNode } from 'react-native-reanimated';\nimport memoize from \"./memoize\";\nvar Easing = EasingNode || OldEasing;\nvar Clock = Animated.Clock,\n  Value = Animated.Value,\n  onChange = Animated.onChange,\n  and = Animated.and,\n  or = Animated.or,\n  abs = Animated.abs,\n  add = Animated.add,\n  block = Animated.block,\n  call = Animated.call,\n  ceil = Animated.ceil,\n  clockRunning = Animated.clockRunning,\n  cond = Animated.cond,\n  divide = Animated.divide,\n  eq = Animated.eq,\n  event = Animated.event,\n  floor = Animated.floor,\n  greaterThan = Animated.greaterThan,\n  lessThan = Animated.lessThan,\n  max = Animated.max,\n  min = Animated.min,\n  multiply = Animated.multiply,\n  neq = Animated.neq,\n  not = Animated.not,\n  round = Animated.round,\n  set = Animated.set,\n  spring = Animated.spring,\n  startClock = Animated.startClock,\n  stopClock = Animated.stopClock,\n  sub = Animated.sub,\n  timing = Animated.timing;\nvar PagerContext = React.createContext({});\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_MINIMUM = 20;\nvar SWIPE_VELOCITY_IMPACT = 0.2;\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar SPRING_VELOCITY_SCALE = 1;\nvar TIMING_CONFIG = {\n  duration: 200,\n  easing: Easing.out(Easing.cubic)\n};\nvar Pager = function (_React$Component) {\n  _inherits(Pager, _React$Component);\n  var _super = _createSuper(Pager);\n  function Pager() {\n    var _this;\n    _classCallCheck(this, Pager);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      enabled: true,\n      childPanGestureHandlerRefs: []\n    });\n    _defineProperty(_assertThisInitialized(_this), \"providerVal\", {\n      addGestureHandlerRef: function addGestureHandlerRef(ref) {\n        if (!_this.state.childPanGestureHandlerRefs.includes(ref)) {\n          _this.setState(function (prevState) {\n            return {\n              childPanGestureHandlerRefs: [].concat(_toConsumableArray(prevState.childPanGestureHandlerRefs), [ref])\n            };\n          });\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"gestureHandlerRef\", React.createRef());\n    _defineProperty(_assertThisInitialized(_this), \"clock\", new Clock());\n    _defineProperty(_assertThisInitialized(_this), \"velocityX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"gestureX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"gestureState\", new Value(State.UNDETERMINED));\n    _defineProperty(_assertThisInitialized(_this), \"offsetX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"gesturesEnabled\", new Value(1));\n    _defineProperty(_assertThisInitialized(_this), \"progress\", new Value(_this.props.navigationState.index * _this.props.layout.width * DIRECTION_RIGHT));\n    _defineProperty(_assertThisInitialized(_this), \"index\", new Value(_this.props.navigationState.index));\n    _defineProperty(_assertThisInitialized(_this), \"nextIndex\", new Value(UNSET));\n    _defineProperty(_assertThisInitialized(_this), \"lastEnteredIndex\", new Value(_this.props.navigationState.index));\n    _defineProperty(_assertThisInitialized(_this), \"isSwiping\", new Value(FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"isSwipeGesture\", new Value(FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"indexAtSwipeEnd\", new Value(_this.props.navigationState.index));\n    _defineProperty(_assertThisInitialized(_this), \"routesLength\", new Value(_this.props.navigationState.routes.length));\n    _defineProperty(_assertThisInitialized(_this), \"layoutWidth\", new Value(_this.props.layout.width));\n    _defineProperty(_assertThisInitialized(_this), \"swipeVelocityImpact\", new Value(_this.props.swipeVelocityImpact !== undefined ? _this.props.swipeVelocityImpact : SWIPE_VELOCITY_IMPACT));\n    _defineProperty(_assertThisInitialized(_this), \"springVelocityScale\", new Value(_this.props.springVelocityScale !== undefined ? _this.props.springVelocityScale : SPRING_VELOCITY_SCALE));\n    _defineProperty(_assertThisInitialized(_this), \"position\", cond(_this.layoutWidth, divide(multiply(_this.progress, -1), _this.layoutWidth), _this.index));\n    _defineProperty(_assertThisInitialized(_this), \"springConfig\", {\n      damping: new Value(_this.props.springConfig.damping !== undefined ? _this.props.springConfig.damping : SPRING_CONFIG.damping),\n      mass: new Value(_this.props.springConfig.mass !== undefined ? _this.props.springConfig.mass : SPRING_CONFIG.mass),\n      stiffness: new Value(_this.props.springConfig.stiffness !== undefined ? _this.props.springConfig.stiffness : SPRING_CONFIG.stiffness),\n      restSpeedThreshold: new Value(_this.props.springConfig.restSpeedThreshold !== undefined ? _this.props.springConfig.restSpeedThreshold : SPRING_CONFIG.restSpeedThreshold),\n      restDisplacementThreshold: new Value(_this.props.springConfig.restDisplacementThreshold !== undefined ? _this.props.springConfig.restDisplacementThreshold : SPRING_CONFIG.restDisplacementThreshold)\n    });\n    _defineProperty(_assertThisInitialized(_this), \"timingConfig\", {\n      duration: new Value(_this.props.timingConfig.duration !== undefined ? _this.props.timingConfig.duration : TIMING_CONFIG.duration)\n    });\n    _defineProperty(_assertThisInitialized(_this), \"initialVelocityForSpring\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"currentIndexValue\", _this.props.navigationState.index);\n    _defineProperty(_assertThisInitialized(_this), \"pendingIndexValue\", undefined);\n    _defineProperty(_assertThisInitialized(_this), \"previouslyFocusedTextInput\", null);\n    _defineProperty(_assertThisInitialized(_this), \"enterListeners\", []);\n    _defineProperty(_assertThisInitialized(_this), \"interactionHandle\", null);\n    _defineProperty(_assertThisInitialized(_this), \"jumpToIndex\", function (index) {\n      _this.isSwipeGesture.setValue(FALSE);\n      _this.nextIndex.setValue(index);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"jumpTo\", function (key) {\n      var _this$props = _this.props,\n        navigationState = _this$props.navigationState,\n        keyboardDismissMode = _this$props.keyboardDismissMode,\n        onIndexChange = _this$props.onIndexChange;\n      var index = navigationState.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n      if (navigationState.index === index) {\n        _this.jumpToIndex(index);\n      } else {\n        onIndexChange(index);\n        if (keyboardDismissMode === 'auto') {\n          Keyboard.dismiss();\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"addListener\", function (type, listener) {\n      switch (type) {\n        case 'enter':\n          _this.enterListeners.push(listener);\n          break;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"removeListener\", function (type, listener) {\n      switch (type) {\n        case 'enter':\n          {\n            var index = _this.enterListeners.indexOf(listener);\n            if (index > -1) {\n              _this.enterListeners.splice(index, 1);\n            }\n            break;\n          }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleEnteredIndexChange\", function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n        value = _ref2[0];\n      var index = Math.max(0, Math.min(value, _this.props.navigationState.routes.length - 1));\n      _this.enterListeners.forEach(function (listener) {\n        return listener(index);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"transitionTo\", function (index) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.progress,\n        time: new Value(0),\n        finished: new Value(FALSE)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(index, _this.layoutWidth, DIRECTION_RIGHT)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(_this.index, index)]), cond(_this.isSwipeGesture, [cond(not(clockRunning(_this.clock)), I18nManager.isRTL ? set(_this.initialVelocityForSpring, multiply(-1, _this.velocityX, _this.springVelocityScale)) : set(_this.initialVelocityForSpring, multiply(_this.velocityX, _this.springVelocityScale))), spring(_this.clock, _objectSpread(_objectSpread({}, state), {}, {\n        velocity: _this.initialVelocityForSpring\n      }), _objectSpread(_objectSpread(_objectSpread({}, SPRING_CONFIG), _this.springConfig), {}, {\n        toValue: toValue\n      }))], timing(_this.clock, _objectSpread(_objectSpread({}, state), {}, {\n        frameTime: frameTime\n      }), _objectSpread(_objectSpread(_objectSpread({}, TIMING_CONFIG), _this.timingConfig), {}, {\n        toValue: toValue\n      }))), cond(not(clockRunning(_this.clock)), startClock(_this.clock)), cond(state.finished, [set(_this.isSwipeGesture, FALSE), set(_this.gestureX, 0), set(_this.velocityX, 0), stopClock(_this.clock)])]);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureEvent\", event([{\n      nativeEvent: {\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX,\n        state: _this.gestureState\n      }\n    }]));\n    _defineProperty(_assertThisInitialized(_this), \"extrapolatedPosition\", add(_this.gestureX, multiply(_this.velocityX, _this.swipeVelocityImpact)));\n    _defineProperty(_assertThisInitialized(_this), \"toggleEnabled\", function () {\n      if (_this.state.enabled) _this.setState({\n        enabled: false\n      }, function () {\n        _this.setState({\n          enabled: true\n        });\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"maybeCancel\", block([cond(and(_this.gesturesEnabled, or(and(eq(_this.index, sub(_this.routesLength, 1)), lessThan(_this.gestureX, 0)), and(eq(_this.index, 0), greaterThan(_this.gestureX, 0)))), set(_this.gesturesEnabled, 0))]));\n    _defineProperty(_assertThisInitialized(_this), \"translateX\", block([onChange(_this.gesturesEnabled, cond(not(_this.gesturesEnabled), call([_this.gesturesEnabled], _this.toggleEnabled))), onChange(_this.index, call([_this.index], function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n        value = _ref4[0];\n      _this.currentIndexValue = value;\n      if (value !== _this.props.navigationState.index) {\n        _this.props.onIndexChange(value);\n        _this.pendingIndexValue = value;\n        _this.forceUpdate();\n      }\n    })), onChange(_this.position, cond(I18nManager.isRTL ? lessThan(_this.gestureX, 0) : greaterThan(_this.gestureX, 0), cond(neq(floor(_this.position), _this.lastEnteredIndex), [set(_this.lastEnteredIndex, floor(_this.position)), call([floor(_this.position)], _this.handleEnteredIndexChange)]), cond(neq(ceil(_this.position), _this.lastEnteredIndex), [set(_this.lastEnteredIndex, ceil(_this.position)), call([ceil(_this.position)], _this.handleEnteredIndexChange)]))), onChange(_this.isSwiping, [cond(not(_this.isSwiping), set(_this.gesturesEnabled, 1)), call([_this.isSwiping, _this.indexAtSwipeEnd, _this.index], function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 3),\n        isSwiping = _ref6[0],\n        indexAtSwipeEnd = _ref6[1],\n        currentIndex = _ref6[2];\n      var _this$props2 = _this.props,\n        keyboardDismissMode = _this$props2.keyboardDismissMode,\n        onSwipeStart = _this$props2.onSwipeStart,\n        onSwipeEnd = _this$props2.onSwipeEnd;\n      if (isSwiping === TRUE) {\n        onSwipeStart === null || onSwipeStart === void 0 ? void 0 : onSwipeStart();\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n        if (keyboardDismissMode === 'auto') {\n          var input = TextInput.State.currentlyFocusedField();\n          TextInput.State.blurTextInput(input);\n          _this.previouslyFocusedTextInput = input;\n        } else if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n      } else {\n        onSwipeEnd === null || onSwipeEnd === void 0 ? void 0 : onSwipeEnd();\n        if (_this.interactionHandle !== null) {\n          InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        }\n        if (keyboardDismissMode === 'auto') {\n          if (indexAtSwipeEnd === currentIndex) {\n            var _input = _this.previouslyFocusedTextInput;\n            if (_input) {\n              TextInput.State.focusTextInput(_input);\n            }\n          }\n          _this.previouslyFocusedTextInput = null;\n        }\n      }\n    })]), onChange(_this.nextIndex, cond(neq(_this.nextIndex, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.gestureX, 0), set(_this.index, _this.nextIndex), set(_this.nextIndex, UNSET)])), cond(eq(_this.gestureState, State.ACTIVE), [_this.maybeCancel, cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.isSwipeGesture, TRUE), set(_this.offsetX, _this.progress)]), set(_this.progress, I18nManager.isRTL ? sub(_this.offsetX, _this.gestureX) : add(_this.offsetX, _this.gestureX)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.indexAtSwipeEnd, _this.index), _this.transitionTo(cond(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.extrapolatedPosition), divide(_this.layoutWidth, 2))), round(min(max(0, sub(_this.index, cond(greaterThan(_this.extrapolatedPosition, 0), I18nManager.isRTL ? DIRECTION_RIGHT : DIRECTION_LEFT, I18nManager.isRTL ? DIRECTION_LEFT : DIRECTION_RIGHT))), sub(_this.routesLength, 1))), _this.index))]), _this.progress]));\n    _defineProperty(_assertThisInitialized(_this), \"getTranslateX\", memoize(function (layoutWidth, routesLength, translateX) {\n      return multiply(min(max(multiply(layoutWidth, sub(routesLength, 1), DIRECTION_RIGHT), translateX), 0), I18nManager.isRTL ? -1 : 1);\n    }));\n    return _this;\n  }\n  _createClass(Pager, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.context && this.context.addGestureHandlerRef) {\n        this.context.addGestureHandlerRef(this.gestureHandlerRef);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n        navigationState = _this$props3.navigationState,\n        layout = _this$props3.layout,\n        swipeVelocityImpact = _this$props3.swipeVelocityImpact,\n        springVelocityScale = _this$props3.springVelocityScale,\n        springConfig = _this$props3.springConfig,\n        timingConfig = _this$props3.timingConfig;\n      var index = navigationState.index,\n        routes = navigationState.routes;\n      if (index !== prevProps.navigationState.index && index !== this.currentIndexValue || typeof this.pendingIndexValue === 'number' && index !== this.pendingIndexValue) {\n        this.jumpToIndex(index);\n      }\n      this.pendingIndexValue = undefined;\n      if (prevProps.navigationState.routes.length !== routes.length) {\n        this.routesLength.setValue(routes.length);\n      }\n      if (prevProps.layout.width !== layout.width) {\n        this.progress.setValue(-index * layout.width);\n        this.layoutWidth.setValue(layout.width);\n      }\n      if (prevProps.swipeVelocityImpact !== swipeVelocityImpact) {\n        this.swipeVelocityImpact.setValue(swipeVelocityImpact !== undefined ? swipeVelocityImpact : SWIPE_VELOCITY_IMPACT);\n      }\n      if (prevProps.springVelocityScale !== springVelocityScale) {\n        this.springVelocityScale.setValue(springVelocityScale !== undefined ? springVelocityScale : SPRING_VELOCITY_SCALE);\n      }\n      if (prevProps.springConfig !== springConfig) {\n        this.springConfig.damping.setValue(springConfig.damping !== undefined ? springConfig.damping : SPRING_CONFIG.damping);\n        this.springConfig.mass.setValue(springConfig.mass !== undefined ? springConfig.mass : SPRING_CONFIG.mass);\n        this.springConfig.stiffness.setValue(springConfig.stiffness !== undefined ? springConfig.stiffness : SPRING_CONFIG.stiffness);\n        this.springConfig.restSpeedThreshold.setValue(springConfig.restSpeedThreshold !== undefined ? springConfig.restSpeedThreshold : SPRING_CONFIG.restSpeedThreshold);\n        this.springConfig.restDisplacementThreshold.setValue(springConfig.restDisplacementThreshold !== undefined ? springConfig.restDisplacementThreshold : SPRING_CONFIG.restDisplacementThreshold);\n      }\n      if (prevProps.timingConfig !== timingConfig) {\n        this.timingConfig.duration.setValue(timingConfig.duration !== undefined ? timingConfig.duration : TIMING_CONFIG.duration);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.interactionHandle !== null) {\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props4 = this.props,\n        layout = _this$props4.layout,\n        navigationState = _this$props4.navigationState,\n        swipeEnabled = _this$props4.swipeEnabled,\n        children = _this$props4.children,\n        removeClippedSubviews = _this$props4.removeClippedSubviews,\n        gestureHandlerProps = _this$props4.gestureHandlerProps;\n      var translateX = this.getTranslateX(this.layoutWidth, this.routesLength, this.translateX);\n      return children({\n        position: this.position,\n        addListener: this.addListener,\n        removeListener: this.removeListener,\n        jumpTo: this.jumpTo,\n        render: function render(children) {\n          return React.createElement(PanGestureHandler, _extends({\n            ref: _this2.gestureHandlerRef,\n            simultaneousHandlers: _this2.state.childPanGestureHandlerRefs,\n            waitFor: _this2.state.childPanGestureHandlerRefs,\n            enabled: layout.width !== 0 && swipeEnabled && _this2.state.enabled,\n            onGestureEvent: _this2.handleGestureEvent,\n            onHandlerStateChange: _this2.handleGestureEvent,\n            activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n            failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]\n          }, gestureHandlerProps), React.createElement(Animated.View, {\n            removeClippedSubviews: removeClippedSubviews,\n            style: [styles.container, layout.width ? {\n              width: layout.width * navigationState.routes.length,\n              transform: [{\n                translateX: translateX\n              }]\n            } : null]\n          }, React.createElement(PagerContext.Provider, {\n            value: _this2.providerVal\n          }, children)));\n        }\n      });\n    }\n  }]);\n  return Pager;\n}(React.Component);\nexport { Pager as default };\n_defineProperty(Pager, \"defaultProps\", {\n  swipeVelocityImpact: SWIPE_VELOCITY_IMPACT,\n  springVelocityScale: SPRING_VELOCITY_SCALE\n});\n_defineProperty(Pager, \"contextType\", PagerContext);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"names":["React","StyleSheet","TextInput","Keyboard","I18nManager","InteractionManager","PanGestureHandler","State","Animated","Easing","OldEasing","EasingNode","memoize","Clock","Value","onChange","and","or","abs","add","block","call","ceil","clockRunning","cond","divide","eq","event","floor","greaterThan","lessThan","max","min","multiply","neq","not","round","set","spring","startClock","stopClock","sub","timing","PagerContext","createContext","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","SWIPE_VELOCITY_IMPACT","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","SPRING_VELOCITY_SCALE","TIMING_CONFIG","duration","easing","out","cubic","Pager","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","apply","concat","_defineProperty","_assertThisInitialized","enabled","childPanGestureHandlerRefs","addGestureHandlerRef","ref","state","includes","setState","prevState","_toConsumableArray","createRef","UNDETERMINED","props","navigationState","index","layout","width","routes","swipeVelocityImpact","undefined","springVelocityScale","layoutWidth","progress","springConfig","timingConfig","isSwipeGesture","setValue","nextIndex","key","_this$props","keyboardDismissMode","onIndexChange","findIndex","route","jumpToIndex","dismiss","type","listener","enterListeners","push","indexOf","splice","_ref","_ref2","_slicedToArray","value","Math","forEach","toValue","frameTime","position","time","finished","clock","isRTL","initialVelocityForSpring","velocityX","_objectSpread","velocity","gestureX","nativeEvent","translationX","gestureState","gesturesEnabled","routesLength","toggleEnabled","_ref3","_ref4","currentIndexValue","pendingIndexValue","forceUpdate","lastEnteredIndex","handleEnteredIndexChange","isSwiping","indexAtSwipeEnd","_ref5","_ref6","currentIndex","_this$props2","onSwipeStart","onSwipeEnd","interactionHandle","createInteractionHandle","input","currentlyFocusedField","blurTextInput","previouslyFocusedTextInput","clearInteractionHandle","focusTextInput","ACTIVE","maybeCancel","offsetX","transitionTo","extrapolatedPosition","translateX","_createClass","componentDidMount","context","gestureHandlerRef","componentDidUpdate","prevProps","_this$props3","componentWillUnmount","render","_this2","_this$props4","swipeEnabled","children","removeClippedSubviews","gestureHandlerProps","getTranslateX","addListener","removeListener","jumpTo","createElement","_extends","simultaneousHandlers","waitFor","onGestureEvent","handleGestureEvent","onHandlerStateChange","activeOffsetX","failOffsetY","View","style","styles","container","transform","Provider","providerVal","Component","default","create","flex","flexDirection"],"sources":["C:\\Users\\belgacem\\OneDrive\\Bureau\\projet02\\SocialApp-React-Native\\node_modules\\react-native-tab-view\\lib\\module\\Pager.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  TextInput,\n  Keyboard,\n  I18nManager,\n  InteractionManager,\n} from 'react-native';\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport Animated, {\n  Easing as OldEasing,\n  // @ts-ignore\n  EasingNode,\n} from 'react-native-reanimated';\nimport memoize from './memoize';\n\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  Listener,\n  PagerCommonProps,\n  EventEmitterProps,\n} from './types';\n\ntype Binary = 0 | 1;\n\nconst Easing = EasingNode || OldEasing;\n\nexport type Props<T extends Route> = PagerCommonProps & {\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  layout: Layout;\n  // Clip unfocused views to improve memory usage\n  // Don't enable this on iOS where this is buggy and views don't re-appear\n  removeClippedSubviews?: boolean;\n  children: (\n    props: EventEmitterProps & {\n      // Animated value which represents the state of current index\n      // It can include fractional digits as it represents the intermediate value\n      position: Animated.Node<number>;\n      // Function to actually render the content of the pager\n      // The parent component takes care of rendering\n      render: (children: React.ReactNode) => React.ReactNode;\n      // Callback to call when switching the tab\n      // The tab switch animation is performed even if the index in state is unchanged\n      jumpTo: (key: string) => void;\n    }\n  ) => React.ReactNode;\n  gestureHandlerProps: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype ComponentState = {\n  enabled: boolean;\n  childPanGestureHandlerRefs: React.RefObject<PanGestureHandler>[];\n};\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  and,\n  or,\n  abs,\n  add,\n  block,\n  call,\n  ceil,\n  clockRunning,\n  cond,\n  divide,\n  eq,\n  event,\n  floor,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  not,\n  round,\n  set,\n  spring,\n  startClock,\n  stopClock,\n  sub,\n  timing,\n} = Animated;\n\nconst PagerContext = React.createContext({});\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 20;\n\nconst SWIPE_VELOCITY_IMPACT = 0.2;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst SPRING_VELOCITY_SCALE = 1;\n\nconst TIMING_CONFIG = {\n  duration: 200,\n  easing: Easing.out(Easing.cubic),\n};\n\nexport default class Pager<T extends Route> extends React.Component<\n  Props<T>,\n  ComponentState\n> {\n  static defaultProps = {\n    swipeVelocityImpact: SWIPE_VELOCITY_IMPACT,\n    springVelocityScale: SPRING_VELOCITY_SCALE,\n  };\n\n  state = {\n    enabled: true,\n    childPanGestureHandlerRefs: [] as React.RefObject<PanGestureHandler>[],\n  };\n\n  componentDidMount() {\n    // Register this PanGestureHandler with the parent (if parent exists)\n    // in order to coordinate gestures between handlers.\n    if (this.context && this.context.addGestureHandlerRef) {\n      this.context.addGestureHandlerRef(this.gestureHandlerRef);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<T>) {\n    const {\n      navigationState,\n      layout,\n      swipeVelocityImpact,\n      springVelocityScale,\n      springConfig,\n      timingConfig,\n    } = this.props;\n    const { index, routes } = navigationState;\n\n    if (\n      // Check for index in state to avoid unintended transition if component updates during swipe\n      (index !== prevProps.navigationState.index &&\n        index !== this.currentIndexValue) ||\n      // Check if the user updated the index correctly after an update\n      (typeof this.pendingIndexValue === 'number' &&\n        index !== this.pendingIndexValue)\n    ) {\n      // Index in user's state is different from the index being tracked\n      this.jumpToIndex(index);\n    }\n\n    // Reset the pending index\n    this.pendingIndexValue = undefined;\n\n    // Update our mappings of animated nodes when props change\n    if (prevProps.navigationState.routes.length !== routes.length) {\n      this.routesLength.setValue(routes.length);\n    }\n\n    if (prevProps.layout.width !== layout.width) {\n      this.progress.setValue(-index * layout.width);\n      this.layoutWidth.setValue(layout.width);\n    }\n\n    if (prevProps.swipeVelocityImpact !== swipeVelocityImpact) {\n      this.swipeVelocityImpact.setValue(\n        swipeVelocityImpact !== undefined\n          ? swipeVelocityImpact\n          : SWIPE_VELOCITY_IMPACT\n      );\n    }\n\n    if (prevProps.springVelocityScale !== springVelocityScale) {\n      this.springVelocityScale.setValue(\n        springVelocityScale !== undefined\n          ? springVelocityScale\n          : SPRING_VELOCITY_SCALE\n      );\n    }\n\n    if (prevProps.springConfig !== springConfig) {\n      this.springConfig.damping.setValue(\n        springConfig.damping !== undefined\n          ? springConfig.damping\n          : SPRING_CONFIG.damping\n      );\n\n      this.springConfig.mass.setValue(\n        springConfig.mass !== undefined ? springConfig.mass : SPRING_CONFIG.mass\n      );\n\n      this.springConfig.stiffness.setValue(\n        springConfig.stiffness !== undefined\n          ? springConfig.stiffness\n          : SPRING_CONFIG.stiffness\n      );\n\n      this.springConfig.restSpeedThreshold.setValue(\n        springConfig.restSpeedThreshold !== undefined\n          ? springConfig.restSpeedThreshold\n          : SPRING_CONFIG.restSpeedThreshold\n      );\n\n      this.springConfig.restDisplacementThreshold.setValue(\n        springConfig.restDisplacementThreshold !== undefined\n          ? springConfig.restDisplacementThreshold\n          : SPRING_CONFIG.restDisplacementThreshold\n      );\n    }\n\n    if (prevProps.timingConfig !== timingConfig) {\n      this.timingConfig.duration.setValue(\n        timingConfig.duration !== undefined\n          ? timingConfig.duration\n          : TIMING_CONFIG.duration\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.interactionHandle !== null) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n    }\n  }\n\n  static contextType = PagerContext;\n\n  // Mechanism to add child PanGestureHandler refs in the case that this\n  // Pager is a parent to child Pagers. Allows for coordination between handlers\n  private providerVal = {\n    addGestureHandlerRef: (ref: React.RefObject<PanGestureHandler>) => {\n      if (!this.state.childPanGestureHandlerRefs.includes(ref)) {\n        this.setState((prevState: ComponentState) => ({\n          childPanGestureHandlerRefs: [\n            ...prevState.childPanGestureHandlerRefs,\n            ref,\n          ],\n        }));\n      }\n    },\n  };\n\n  // PanGestureHandler ref used for coordination with parent handlers\n  private gestureHandlerRef: React.RefObject<\n    PanGestureHandler\n  > = React.createRef();\n\n  // Clock used for tab transition animations\n  private clock = new Clock();\n\n  // Current state of the gesture\n  private velocityX = new Value(0);\n  private gestureX = new Value(0);\n  private gestureState = new Value(State.UNDETERMINED);\n  private offsetX = new Value(0);\n\n  // Tracks current state of gesture handler enabled\n  private gesturesEnabled = new Value(1);\n\n  // Current progress of the page (translateX value)\n  private progress = new Value(\n    // Initial value is based on the index and page width\n    this.props.navigationState.index * this.props.layout.width * DIRECTION_RIGHT\n  );\n\n  // Initial index of the tabs\n  private index = new Value(this.props.navigationState.index);\n\n  // Next index of the tabs, updated for navigation from outside (tab press, state update)\n  private nextIndex: Animated.Value<number> = new Value(UNSET);\n\n  // Scene that was last entered\n  private lastEnteredIndex = new Value(this.props.navigationState.index);\n\n  // Whether the user is currently dragging the screen\n  private isSwiping: Animated.Value<Binary> = new Value(FALSE);\n\n  // Whether the update was due to swipe gesture\n  // This controls whether the transition will use a spring or timing animation\n  // Remember to set it before transition needs to occur\n  private isSwipeGesture: Animated.Value<Binary> = new Value(FALSE);\n\n  // Track the index value when a swipe gesture has ended\n  // This lets us know if a gesture end triggered a tab switch or not\n  private indexAtSwipeEnd: Animated.Value<number> = new Value(\n    this.props.navigationState.index\n  );\n\n  // Mappings to some prop values\n  // We use them in animation calculations, so we need live animated nodes\n  private routesLength = new Value(this.props.navigationState.routes.length);\n  private layoutWidth = new Value(this.props.layout.width);\n\n  // Determines how relevant is a velocity while calculating next position while swiping\n  private swipeVelocityImpact = new Value(\n    this.props.swipeVelocityImpact !== undefined\n      ? this.props.swipeVelocityImpact\n      : SWIPE_VELOCITY_IMPACT\n  );\n\n  private springVelocityScale = new Value(\n    this.props.springVelocityScale !== undefined\n      ? this.props.springVelocityScale\n      : SPRING_VELOCITY_SCALE\n  );\n\n  // The position value represent the position of the pager on a scale of 0 - routes.length-1\n  // It is calculated based on the translate value and layout width\n  // If we don't have the layout yet, we should return the current index\n  private position = cond(\n    this.layoutWidth,\n    divide(multiply(this.progress, -1), this.layoutWidth),\n    this.index\n  );\n\n  // Animation configuration\n  private springConfig = {\n    damping: new Value(\n      this.props.springConfig.damping !== undefined\n        ? this.props.springConfig.damping\n        : SPRING_CONFIG.damping\n    ),\n    mass: new Value(\n      this.props.springConfig.mass !== undefined\n        ? this.props.springConfig.mass\n        : SPRING_CONFIG.mass\n    ),\n    stiffness: new Value(\n      this.props.springConfig.stiffness !== undefined\n        ? this.props.springConfig.stiffness\n        : SPRING_CONFIG.stiffness\n    ),\n    restSpeedThreshold: new Value(\n      this.props.springConfig.restSpeedThreshold !== undefined\n        ? this.props.springConfig.restSpeedThreshold\n        : SPRING_CONFIG.restSpeedThreshold\n    ),\n    restDisplacementThreshold: new Value(\n      this.props.springConfig.restDisplacementThreshold !== undefined\n        ? this.props.springConfig.restDisplacementThreshold\n        : SPRING_CONFIG.restDisplacementThreshold\n    ),\n  };\n\n  private timingConfig = {\n    duration: new Value(\n      this.props.timingConfig.duration !== undefined\n        ? this.props.timingConfig.duration\n        : TIMING_CONFIG.duration\n    ),\n  };\n\n  // The reason for using this value instead of simply passing `this._velocity`\n  // into a spring animation is that we need to reverse it if we're using RTL mode.\n  // Also, it's not possible to pass multiplied value there, because\n  // value passed to STATE of spring (the first argument) has to be Animated.Value\n  // and it's not allowed to pass other nodes there. The result of multiplying is not an\n  // Animated.Value. So this value is being updated on each start of spring animation.\n  private initialVelocityForSpring = new Value(0);\n\n  // The current index change caused by the pager's animation\n  // The pager is used as a controlled component\n  // We need to keep track of the index to determine when to trigger animation\n  // The state will change at various points, we should only respond when we are out of sync\n  // This will ensure smoother animation and avoid weird glitches\n  private currentIndexValue = this.props.navigationState.index;\n\n  // The pending index value as result of state update caused by swipe gesture\n  // We need to set it when state changes from inside this component\n  // It also needs to be reset right after componentDidUpdate fires\n  private pendingIndexValue: number | undefined = undefined;\n\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  private previouslyFocusedTextInput: number | null = null;\n\n  // Listeners for the entered screen\n  private enterListeners: Listener[] = [];\n\n  // InteractionHandle to handle tasks around animations\n  private interactionHandle: number | null = null;\n\n  private jumpToIndex = (index: number) => {\n    // If the index changed, we need to trigger a tab switch\n    this.isSwipeGesture.setValue(FALSE);\n    this.nextIndex.setValue(index);\n  };\n\n  private jumpTo = (key: string) => {\n    const { navigationState, keyboardDismissMode, onIndexChange } = this.props;\n\n    const index = navigationState.routes.findIndex(\n      (route) => route.key === key\n    );\n\n    // A tab switch might occur when we're in the middle of a transition\n    // In that case, the index might be same as before\n    // So we conditionally make the pager to update the position\n    if (navigationState.index === index) {\n      this.jumpToIndex(index);\n    } else {\n      onIndexChange(index);\n\n      // When the index changes, the focused input will no longer be in current tab\n      // So we should dismiss the keyboard\n      if (keyboardDismissMode === 'auto') {\n        Keyboard.dismiss();\n      }\n    }\n  };\n\n  private addListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter':\n        this.enterListeners.push(listener);\n        break;\n    }\n  };\n\n  private removeListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter': {\n        const index = this.enterListeners.indexOf(listener);\n\n        if (index > -1) {\n          this.enterListeners.splice(index, 1);\n        }\n\n        break;\n      }\n    }\n  };\n\n  private handleEnteredIndexChange = ([value]: readonly number[]) => {\n    const index = Math.max(\n      0,\n      Math.min(value, this.props.navigationState.routes.length - 1)\n    );\n\n    this.enterListeners.forEach((listener) => listener(index));\n  };\n\n  private transitionTo = (index: Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.progress,\n      time: new Value(0),\n      finished: new Value(FALSE),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(index, this.layoutWidth, DIRECTION_RIGHT)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(this.index, index),\n      ]),\n      cond(\n        this.isSwipeGesture,\n        // Animate the values with a spring for swipe\n        [\n          cond(\n            not(clockRunning(this.clock)),\n            I18nManager.isRTL\n              ? set(\n                  this.initialVelocityForSpring,\n                  multiply(-1, this.velocityX, this.springVelocityScale)\n                )\n              : set(\n                  this.initialVelocityForSpring,\n                  multiply(this.velocityX, this.springVelocityScale)\n                )\n          ),\n          spring(\n            this.clock,\n            { ...state, velocity: this.initialVelocityForSpring },\n            { ...SPRING_CONFIG, ...this.springConfig, toValue }\n          ),\n        ],\n        // Otherwise use a timing animation for faster switching\n        timing(\n          this.clock,\n          { ...state, frameTime },\n          { ...TIMING_CONFIG, ...this.timingConfig, toValue }\n        )\n      ),\n      cond(not(clockRunning(this.clock)), startClock(this.clock)),\n      cond(state.finished, [\n        // Reset values\n        set(this.isSwipeGesture, FALSE),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n      ]),\n    ]);\n  };\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n        state: this.gestureState,\n      },\n    },\n  ]);\n\n  private extrapolatedPosition = add(\n    this.gestureX,\n    multiply(this.velocityX, this.swipeVelocityImpact)\n  );\n\n  private toggleEnabled = () => {\n    if (this.state.enabled)\n      this.setState({ enabled: false }, () => {\n        this.setState({ enabled: true });\n      });\n  };\n\n  // Cancel gesture if swiping back from the initial tab or forward from the last tab.\n  // Enables parent Pager to pick up the gesture if one exists.\n  private maybeCancel = block([\n    cond(\n      and(\n        this.gesturesEnabled,\n        or(\n          and(\n            eq(this.index, sub(this.routesLength, 1)),\n            lessThan(this.gestureX, 0)\n          ),\n          and(eq(this.index, 0), greaterThan(this.gestureX, 0))\n        )\n      ),\n      set(this.gesturesEnabled, 0)\n    ),\n  ]);\n\n  private translateX = block([\n    onChange(\n      this.gesturesEnabled,\n      cond(\n        not(this.gesturesEnabled),\n        call([this.gesturesEnabled], this.toggleEnabled)\n      )\n    ),\n    onChange(\n      this.index,\n      call([this.index], ([value]) => {\n        this.currentIndexValue = value;\n        // Without this check, the pager can go to an infinite update <-> animate loop for sync updates\n        if (value !== this.props.navigationState.index) {\n          // If the index changed, and previous animation has finished, update state\n          this.props.onIndexChange(value);\n\n          this.pendingIndexValue = value;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.position,\n      // Listen to updates in the position to detect when we enter a screen\n      // This is useful for things such as lazy loading when index change will fire too late\n      cond(\n        I18nManager.isRTL\n          ? lessThan(this.gestureX, 0)\n          : greaterThan(this.gestureX, 0),\n        // Based on the direction of the gesture, determine if we're entering the previous or next screen\n        cond(neq(floor(this.position), this.lastEnteredIndex), [\n          set(this.lastEnteredIndex, floor(this.position)),\n          call([floor(this.position)], this.handleEnteredIndexChange),\n        ]),\n        cond(neq(ceil(this.position), this.lastEnteredIndex), [\n          set(this.lastEnteredIndex, ceil(this.position)),\n          call([ceil(this.position)], this.handleEnteredIndexChange),\n        ])\n      )\n    ),\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      [\n        cond(not(this.isSwiping), set(this.gesturesEnabled, 1)),\n        call(\n          [this.isSwiping, this.indexAtSwipeEnd, this.index],\n          ([isSwiping, indexAtSwipeEnd, currentIndex]: readonly number[]) => {\n            const {\n              keyboardDismissMode,\n              onSwipeStart,\n              onSwipeEnd,\n            } = this.props;\n\n            if (isSwiping === TRUE) {\n              onSwipeStart?.();\n              this.interactionHandle = InteractionManager.createInteractionHandle();\n\n              if (keyboardDismissMode === 'auto') {\n                const input = TextInput.State.currentlyFocusedField();\n\n                // When a gesture begins, blur the currently focused input\n                TextInput.State.blurTextInput(input);\n\n                // Store the id of this input so we can refocus it if gesture was cancelled\n                this.previouslyFocusedTextInput = input;\n              } else if (keyboardDismissMode === 'on-drag') {\n                Keyboard.dismiss();\n              }\n            } else {\n              onSwipeEnd?.();\n\n              if (this.interactionHandle !== null) {\n                InteractionManager.clearInteractionHandle(\n                  this.interactionHandle\n                );\n              }\n\n              if (keyboardDismissMode === 'auto') {\n                if (indexAtSwipeEnd === currentIndex) {\n                  // The index didn't change, we should restore the focus of text input\n                  const input = this.previouslyFocusedTextInput;\n\n                  if (input) {\n                    TextInput.State.focusTextInput(input);\n                  }\n                }\n\n                this.previouslyFocusedTextInput = null;\n              }\n            }\n          }\n        ),\n      ]\n    ),\n    onChange(\n      this.nextIndex,\n      cond(neq(this.nextIndex, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        set(this.gestureX, 0),\n        // Update the index to trigger the transition\n        set(this.index, this.nextIndex),\n        set(this.nextIndex, UNSET),\n      ])\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        this.maybeCancel,\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          set(this.isSwipeGesture, TRUE),\n          // Also update the drag offset to the last progress\n          set(this.offsetX, this.progress),\n        ]),\n        // Update progress with previous offset + gesture distance\n        set(\n          this.progress,\n          I18nManager.isRTL\n            ? sub(this.offsetX, this.gestureX)\n            : add(this.offsetX, this.gestureX)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.indexAtSwipeEnd, this.index),\n        this.transitionTo(\n          cond(\n            and(\n              // We should consider velocity and gesture distance only when a swipe ends\n              // The gestureX value will be non-zero when swipe has happened\n              // We check against a minimum distance instead of 0 because `activeOffsetX` doesn't seem to be respected on Android\n              // For other factors such as state update, the velocity and gesture distance don't matter\n              greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n              greaterThan(\n                abs(this.extrapolatedPosition),\n                divide(this.layoutWidth, 2)\n              )\n            ),\n            // For swipe gesture, to calculate the index, determine direction and add to index\n            // When the user swipes towards the left, we transition to the next tab\n            // When the user swipes towards the right, we transition to the previous tab\n            round(\n              min(\n                max(\n                  0,\n                  sub(\n                    this.index,\n                    cond(\n                      greaterThan(this.extrapolatedPosition, 0),\n                      I18nManager.isRTL ? DIRECTION_RIGHT : DIRECTION_LEFT,\n                      I18nManager.isRTL ? DIRECTION_LEFT : DIRECTION_RIGHT\n                    )\n                  )\n                ),\n                sub(this.routesLength, 1)\n              )\n            ),\n            // Index didn't change/changed due to state update\n            this.index\n          )\n        ),\n      ]\n    ),\n    this.progress,\n  ]);\n\n  private getTranslateX = memoize(\n    (\n      layoutWidth: Animated.Node<number>,\n      routesLength: Animated.Node<number>,\n      translateX: Animated.Node<number>\n    ) =>\n      multiply(\n        // Make sure that the translation doesn't exceed the bounds to prevent overscrolling\n        min(\n          max(\n            multiply(layoutWidth, sub(routesLength, 1), DIRECTION_RIGHT),\n            translateX\n          ),\n          0\n        ),\n        I18nManager.isRTL ? -1 : 1\n      )\n  );\n\n  render() {\n    const {\n      layout,\n      navigationState,\n      swipeEnabled,\n      children,\n      removeClippedSubviews,\n      gestureHandlerProps,\n    } = this.props;\n\n    const translateX = this.getTranslateX(\n      this.layoutWidth,\n      this.routesLength,\n      this.translateX\n    );\n\n    return children({\n      position: this.position,\n      addListener: this.addListener,\n      removeListener: this.removeListener,\n      jumpTo: this.jumpTo,\n      render: (children) => (\n        <PanGestureHandler\n          ref={this.gestureHandlerRef}\n          simultaneousHandlers={this.state.childPanGestureHandlerRefs}\n          waitFor={this.state.childPanGestureHandlerRefs}\n          enabled={layout.width !== 0 && swipeEnabled && this.state.enabled}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureEvent}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            removeClippedSubviews={removeClippedSubviews}\n            style={[\n              styles.container,\n              layout.width\n                ? {\n                    width: layout.width * navigationState.routes.length,\n                    transform: [{ translateX }] as any,\n                  }\n                : null,\n            ]}\n          >\n            <PagerContext.Provider value={this.providerVal}>\n              {children}\n            </PagerContext.Provider>\n          </Animated.View>\n        </PanGestureHandler>\n      ),\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}