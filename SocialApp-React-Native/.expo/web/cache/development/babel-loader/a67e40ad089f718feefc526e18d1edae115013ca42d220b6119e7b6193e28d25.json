{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { SET_POSTS, CREATE_POST, DELETE_POST, UPDATE_POST, LIKE_POST, UNLIKE_POST, COMMENT_POST, UNCOMMENT_POST, ADD_COMMENT_TEMP } from \"../actions/posts\";\nvar initialState = {\n  allPosts: []\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case SET_POSTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: action.posts\n      });\n    case CREATE_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: [action.postData].concat(_toConsumableArray(state.allPosts))\n      });\n    case UPDATE_POST:\n      var postIndex = state.allPosts.findIndex(function (post) {\n        return post._id === action.updatedPostData._id;\n      });\n      var updatedAllPosts = _toConsumableArray(state.allPosts);\n      updatedAllPosts[postIndex] = action.updatedPostData;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: updatedAllPosts\n      });\n    case DELETE_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: state.allPosts.filter(function (post) {\n          return post._id !== action.pid;\n        })\n      });\n    case LIKE_POST:\n      var pIndex = state.allPosts.findIndex(function (post) {\n        return post._id === action.postId;\n      });\n      var updatedLikePosts = _toConsumableArray(state.allPosts);\n      if (updatedLikePosts[pIndex].likes.indexOf(action.userId) === -1) {\n        updatedLikePosts[pIndex].likes = updatedLikePosts[pIndex].likes.concat(action.userId);\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: updatedLikePosts\n      });\n    case UNLIKE_POST:\n      var pInd = state.allPosts.findIndex(function (post) {\n        return post._id === action.postId;\n      });\n      var updatedUnlikePosts = _toConsumableArray(state.allPosts);\n      updatedUnlikePosts[pInd].likes = updatedUnlikePosts[pInd].likes.filter(function (x) {\n        return x !== action.userId;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: updatedUnlikePosts\n      });\n    case COMMENT_POST:\n      var index = state.allPosts.findIndex(function (post) {\n        return post._id === action.postId;\n      });\n      var updatedCommentPosts = _toConsumableArray(state.allPosts);\n      updatedCommentPosts[index].comments = action.comments;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: updatedCommentPosts\n      });\n    case UNCOMMENT_POST:\n      var indx = state.allPosts.findIndex(function (post) {\n        return post._id === action.postId;\n      });\n      var updatedUncommentPosts = _toConsumableArray(state.allPosts);\n      updatedUncommentPosts[indx].comments = updatedUncommentPosts[indx].comments.filter(function (c) {\n        return c._id !== action.commentId;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: updatedUncommentPosts\n      });\n    case ADD_COMMENT_TEMP:\n      var i = state.allPosts.findIndex(function (post) {\n        return post._id === action.postId;\n      });\n      var updatedAddComment = _toConsumableArray(state.allPosts);\n      updatedAddComment[i].comments = updatedAddComment[i].comments.concat(action.comment);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: updatedAddComment\n      });\n    default:\n      return state;\n  }\n});","map":{"version":3,"names":["SET_POSTS","CREATE_POST","DELETE_POST","UPDATE_POST","LIKE_POST","UNLIKE_POST","COMMENT_POST","UNCOMMENT_POST","ADD_COMMENT_TEMP","initialState","allPosts","state","arguments","length","undefined","action","type","_objectSpread","posts","postData","concat","_toConsumableArray","postIndex","findIndex","post","_id","updatedPostData","updatedAllPosts","filter","pid","pIndex","postId","updatedLikePosts","likes","indexOf","userId","pInd","updatedUnlikePosts","x","index","updatedCommentPosts","comments","indx","updatedUncommentPosts","c","commentId","i","updatedAddComment","comment"],"sources":["C:/Users/belgacem/OneDrive/Bureau/projet02/SocialApp-React-Native/store/reducers/posts.js"],"sourcesContent":["import { SET_POSTS, CREATE_POST, DELETE_POST, UPDATE_POST, LIKE_POST, UNLIKE_POST, COMMENT_POST, UNCOMMENT_POST, ADD_COMMENT_TEMP } from \"../actions/posts\";\r\n\r\nconst initialState = {\r\n    allPosts: [],\r\n};\r\n\r\nexport default (state=initialState, action) => {\r\n    switch(action.type){\r\n        case SET_POSTS:\r\n            return {\r\n                ...state,\r\n                allPosts: action.posts\r\n            }\r\n\r\n        case CREATE_POST:\r\n            return{\r\n                ...state,\r\n                allPosts: [action.postData, ...state.allPosts]\r\n            }\r\n\r\n        case UPDATE_POST:\r\n            const postIndex = state.allPosts.findIndex(post => post._id === action.updatedPostData._id);\r\n            const updatedAllPosts = [...state.allPosts];\r\n            updatedAllPosts[postIndex] = action.updatedPostData;\r\n            return {\r\n                ...state,\r\n                allPosts: updatedAllPosts\r\n            }\r\n\r\n        case DELETE_POST:\r\n            return {\r\n                ...state,\r\n                allPosts: state.allPosts.filter(post => post._id !== action.pid)\r\n            }\r\n\r\n        case LIKE_POST:\r\n            const pIndex = state.allPosts.findIndex(post => post._id === action.postId);\r\n            const updatedLikePosts = [...state.allPosts];\r\n            if(updatedLikePosts[pIndex].likes.indexOf(action.userId) === -1){\r\n                updatedLikePosts[pIndex].likes = updatedLikePosts[pIndex].likes.concat(action.userId);\r\n            }\r\n            return{\r\n                ...state,\r\n                allPosts: updatedLikePosts\r\n            }\r\n\r\n        case UNLIKE_POST:\r\n            const pInd = state.allPosts.findIndex(post => post._id === action.postId);\r\n            const updatedUnlikePosts = [...state.allPosts];\r\n            updatedUnlikePosts[pInd].likes = updatedUnlikePosts[pInd].likes.filter(x => x !== action.userId);\r\n            return{\r\n                ...state,\r\n                allPosts: updatedUnlikePosts\r\n            }\r\n\r\n        case COMMENT_POST:\r\n            const index = state.allPosts.findIndex(post => post._id === action.postId);\r\n            const updatedCommentPosts = [...state.allPosts];\r\n            updatedCommentPosts[index].comments = action.comments;\r\n            return{\r\n                ...state,\r\n                allPosts: updatedCommentPosts\r\n            }\r\n\r\n        case UNCOMMENT_POST:\r\n            const indx = state.allPosts.findIndex(post => post._id === action.postId);\r\n            const updatedUncommentPosts = [...state.allPosts];\r\n            updatedUncommentPosts[indx].comments = updatedUncommentPosts[indx].comments.filter(c => c._id !== action.commentId)\r\n\r\n            return{\r\n                ...state,\r\n                allPosts: updatedUncommentPosts\r\n            }\r\n\r\n        case ADD_COMMENT_TEMP:\r\n            const i = state.allPosts.findIndex(post => post._id === action.postId);\r\n            const updatedAddComment = [...state.allPosts];\r\n            updatedAddComment[i].comments = updatedAddComment[i].comments.concat(action.comment)\r\n            return{\r\n                ...state,\r\n                allPosts: updatedAddComment\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}