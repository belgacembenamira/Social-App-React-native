{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\belgacem\\\\OneDrive\\\\Bureau\\\\projet02\\\\SocialApp-React-Native\\\\node_modules\\\\react-native-keyboard-aware-scroll-view\\\\lib\\\\KeyboardAwareHOC.js\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { isIphoneX } from 'react-native-iphone-x-helper';\nvar _KAM_DEFAULT_TAB_BAR_HEIGHT = isIphoneX() ? 83 : 49;\nvar _KAM_KEYBOARD_OPENING_TIME = 250;\nvar _KAM_EXTRA_HEIGHT = 75;\nvar supportedKeyboardEvents = ['keyboardWillShow', 'keyboardDidShow', 'keyboardWillHide', 'keyboardDidHide', 'keyboardWillChangeFrame', 'keyboardDidChangeFrame'];\nvar keyboardEventToCallbackName = function keyboardEventToCallbackName(eventName) {\n  return 'on' + eventName[0].toUpperCase() + eventName.substring(1);\n};\nvar keyboardEventPropTypes = supportedKeyboardEvents.reduce(function (acc, eventName) {\n  return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, keyboardEventToCallbackName(eventName), PropTypes.func));\n}, {});\nvar keyboardAwareHOCTypeEvents = supportedKeyboardEvents.reduce(function (acc, eventName) {\n  return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, keyboardEventToCallbackName(eventName), Function));\n}, {});\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent && (WrappedComponent.displayName || WrappedComponent.name) || 'Component';\n}\nvar ScrollIntoViewDefaultOptions = {\n  enableOnAndroid: false,\n  contentContainerStyle: undefined,\n  enableAutomaticScroll: true,\n  extraHeight: _KAM_EXTRA_HEIGHT,\n  extraScrollHeight: 0,\n  enableResetScrollToCoords: true,\n  keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME,\n  viewIsInsideTabBar: false,\n  refPropName: 'ref',\n  extractNativeRef: function extractNativeRef(ref) {\n    if (ref.getNode) {\n      return ref.getNode();\n    } else {\n      return ref;\n    }\n  }\n};\nfunction KeyboardAwareHOC(ScrollableComponent) {\n  var _class;\n  var userOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var hocOptions = _objectSpread(_objectSpread({}, ScrollIntoViewDefaultOptions), userOptions);\n  return _class = function (_React$Component) {\n    _inherits(_class, _React$Component);\n    var _super = _createSuper(_class);\n    function _class(props) {\n      var _this;\n      _classCallCheck(this, _class);\n      _this = _super.call(this, props);\n      _this.getScrollResponder = function () {\n        return _this._rnkasv_keyboardView && _this._rnkasv_keyboardView.getScrollResponder && _this._rnkasv_keyboardView.getScrollResponder();\n      };\n      _this.scrollToPosition = function (x, y) {\n        var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        var responder = _this.getScrollResponder();\n        responder && responder.scrollResponderScrollTo({\n          x: x,\n          y: y,\n          animated: animated\n        });\n      };\n      _this.scrollToEnd = function () {\n        var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var responder = _this.getScrollResponder();\n        responder && responder.scrollResponderScrollToEnd({\n          animated: animated\n        });\n      };\n      _this.scrollForExtraHeightOnAndroid = function (extraHeight) {\n        _this.scrollToPosition(0, _this.position.y + extraHeight, true);\n      };\n      _this.scrollToFocusedInput = function (reactNode, extraHeight, keyboardOpeningTime) {\n        if (extraHeight === undefined) {\n          extraHeight = _this.props.extraHeight || 0;\n        }\n        if (keyboardOpeningTime === undefined) {\n          keyboardOpeningTime = _this.props.keyboardOpeningTime || 0;\n        }\n        setTimeout(function () {\n          if (!_this.mountedComponent) {\n            return;\n          }\n          var responder = _this.getScrollResponder();\n          responder && responder.scrollResponderScrollNativeHandleToKeyboard(reactNode, extraHeight, true);\n        }, keyboardOpeningTime);\n      };\n      _this.scrollIntoView = function _callee(element) {\n        var options,\n          _await$Promise$all,\n          _await$Promise$all2,\n          parentLayout,\n          childLayout,\n          getScrollPosition,\n          _getScrollPosition,\n          x,\n          y,\n          animated,\n          _args = arguments;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                if (!(!_this._rnkasv_keyboardView || !element)) {\n                  _context.next = 3;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 3:\n                _context.next = 5;\n                return _regeneratorRuntime.awrap(Promise.all([_this._measureElement(_this._rnkasv_keyboardView), _this._measureElement(element)]));\n              case 5:\n                _await$Promise$all = _context.sent;\n                _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n                parentLayout = _await$Promise$all2[0];\n                childLayout = _await$Promise$all2[1];\n                getScrollPosition = options.getScrollPosition || _this._defaultGetScrollPosition;\n                _getScrollPosition = getScrollPosition(parentLayout, childLayout, _this.position), x = _getScrollPosition.x, y = _getScrollPosition.y, animated = _getScrollPosition.animated;\n                _this.scrollToPosition(x, y, animated);\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n      _this._defaultGetScrollPosition = function (parentLayout, childLayout, contentOffset) {\n        return {\n          x: 0,\n          y: Math.max(0, childLayout.y - parentLayout.y + contentOffset.y),\n          animated: true\n        };\n      };\n      _this._measureElement = function (element) {\n        var node = findNodeHandle(element);\n        return new Promise(function (resolve) {\n          UIManager.measureInWindow(node, function (x, y, width, height) {\n            resolve({\n              x: x,\n              y: y,\n              width: width,\n              height: height\n            });\n          });\n        });\n      };\n      _this._updateKeyboardSpace = function (frames) {\n        if (_this.props.enableAutomaticScroll) {\n          var keyboardSpace = frames.endCoordinates.height + _this.props.extraScrollHeight;\n          if (_this.props.viewIsInsideTabBar) {\n            keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT;\n          }\n          _this.setState({\n            keyboardSpace: keyboardSpace\n          });\n          var currentlyFocusedField = TextInput.State.currentlyFocusedField();\n          var responder = _this.getScrollResponder();\n          if (!currentlyFocusedField || !responder) {\n            return;\n          }\n          UIManager.viewIsDescendantOf(currentlyFocusedField, responder.getInnerViewNode(), function (isAncestor) {\n            if (isAncestor) {\n              UIManager.measureInWindow(currentlyFocusedField, function (x, y, width, height) {\n                var textInputBottomPosition = y + height;\n                var keyboardPosition = frames.endCoordinates.screenY;\n                var totalExtraHeight = _this.props.extraScrollHeight + _this.props.extraHeight;\n                if (Platform.OS === 'ios') {\n                  if (textInputBottomPosition > keyboardPosition - totalExtraHeight) {\n                    _this._scrollToFocusedInputWithNodeHandle(currentlyFocusedField);\n                  }\n                } else {\n                  if (textInputBottomPosition > keyboardPosition) {\n                    keyboardSpace = keyboardSpace - (textInputBottomPosition - keyboardPosition);\n                    _this.setState({\n                      keyboardSpace: keyboardSpace\n                    });\n                    _this.scrollForExtraHeightOnAndroid(totalExtraHeight);\n                  } else if (textInputBottomPosition > keyboardPosition - totalExtraHeight) {\n                    _this.scrollForExtraHeightOnAndroid(totalExtraHeight - (keyboardPosition - textInputBottomPosition));\n                  }\n                }\n              });\n            }\n          });\n        }\n        if (!_this.props.resetScrollToCoords) {\n          if (!_this.defaultResetScrollToCoords) {\n            _this.defaultResetScrollToCoords = _this.position;\n          }\n        }\n      };\n      _this._resetKeyboardSpace = function () {\n        var keyboardSpace = _this.props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;\n        _this.setState({\n          keyboardSpace: keyboardSpace\n        });\n        if (_this.props.enableResetScrollToCoords === false) {\n          _this.defaultResetScrollToCoords = null;\n          return;\n        } else if (_this.props.resetScrollToCoords) {\n          _this.scrollToPosition(_this.props.resetScrollToCoords.x, _this.props.resetScrollToCoords.y, true);\n        } else {\n          if (_this.defaultResetScrollToCoords) {\n            _this.scrollToPosition(_this.defaultResetScrollToCoords.x, _this.defaultResetScrollToCoords.y, true);\n            _this.defaultResetScrollToCoords = null;\n          } else {\n            _this.scrollToPosition(0, 0, true);\n          }\n        }\n      };\n      _this._scrollToFocusedInputWithNodeHandle = function (nodeID, extraHeight, keyboardOpeningTime) {\n        if (extraHeight === undefined) {\n          extraHeight = _this.props.extraHeight;\n        }\n        var reactNode = findNodeHandle(nodeID);\n        _this.scrollToFocusedInput(reactNode, extraHeight + _this.props.extraScrollHeight, keyboardOpeningTime !== undefined ? keyboardOpeningTime : _this.props.keyboardOpeningTime || 0);\n      };\n      _this._handleOnScroll = function (e) {\n        _this.position = e.nativeEvent.contentOffset;\n      };\n      _this._handleRef = function (ref) {\n        _this._rnkasv_keyboardView = ref ? hocOptions.extractNativeRef(ref) : ref;\n        if (_this.props.innerRef) {\n          _this.props.innerRef(_this._rnkasv_keyboardView);\n        }\n      };\n      _this.update = function () {\n        var currentlyFocusedField = TextInput.State.currentlyFocusedField();\n        var responder = _this.getScrollResponder();\n        if (!currentlyFocusedField || !responder) {\n          return;\n        }\n        _this._scrollToFocusedInputWithNodeHandle(currentlyFocusedField);\n      };\n      _this.keyboardWillShowEvent = undefined;\n      _this.keyboardWillHideEvent = undefined;\n      _this.callbacks = {};\n      _this.position = {\n        x: 0,\n        y: 0\n      };\n      _this.defaultResetScrollToCoords = null;\n      var _keyboardSpace = props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;\n      _this.state = {\n        keyboardSpace: _keyboardSpace\n      };\n      return _this;\n    }\n    _createClass(_class, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n        this.mountedComponent = true;\n        if (Platform.OS === 'ios') {\n          this.keyboardWillShowEvent = Keyboard.addListener('keyboardWillShow', this._updateKeyboardSpace);\n          this.keyboardWillHideEvent = Keyboard.addListener('keyboardWillHide', this._resetKeyboardSpace);\n        } else if (Platform.OS === 'android' && this.props.enableOnAndroid) {\n          this.keyboardWillShowEvent = Keyboard.addListener('keyboardDidShow', this._updateKeyboardSpace);\n          this.keyboardWillHideEvent = Keyboard.addListener('keyboardDidHide', this._resetKeyboardSpace);\n        }\n        supportedKeyboardEvents.forEach(function (eventName) {\n          var callbackName = keyboardEventToCallbackName(eventName);\n          if (_this2.props[callbackName]) {\n            _this2.callbacks[eventName] = Keyboard.addListener(eventName, _this2.props[callbackName]);\n          }\n        });\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        if (this.props.viewIsInsideTabBar !== prevProps.viewIsInsideTabBar) {\n          var keyboardSpace = this.props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;\n          if (this.state.keyboardSpace !== keyboardSpace) {\n            this.setState({\n              keyboardSpace: keyboardSpace\n            });\n          }\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.mountedComponent = false;\n        this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove();\n        this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove();\n        Object.values(this.callbacks).forEach(function (callback) {\n          return callback.remove();\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n          enableOnAndroid = _this$props.enableOnAndroid,\n          contentContainerStyle = _this$props.contentContainerStyle,\n          onScroll = _this$props.onScroll;\n        var newContentContainerStyle;\n        if (Platform.OS === 'android' && enableOnAndroid) {\n          newContentContainerStyle = [].concat(contentContainerStyle).concat({\n            paddingBottom: ((contentContainerStyle || {}).paddingBottom || 0) + this.state.keyboardSpace\n          });\n        }\n        var refProps = _defineProperty({}, hocOptions.refPropName, this._handleRef);\n        return React.createElement(ScrollableComponent, _extends({}, refProps, {\n          keyboardDismissMode: \"interactive\",\n          contentInset: {\n            bottom: this.state.keyboardSpace\n          },\n          automaticallyAdjustContentInsets: false,\n          showsVerticalScrollIndicator: true,\n          scrollEventThrottle: 1\n        }, this.props, {\n          contentContainerStyle: newContentContainerStyle || contentContainerStyle,\n          keyboardSpace: this.state.keyboardSpace,\n          getScrollResponder: this.getScrollResponder,\n          scrollToPosition: this.scrollToPosition,\n          scrollToEnd: this.scrollToEnd,\n          scrollForExtraHeightOnAndroid: this.scrollForExtraHeightOnAndroid,\n          scrollToFocusedInput: this.scrollToFocusedInput,\n          scrollIntoView: this.scrollIntoView,\n          resetKeyboardSpace: this._resetKeyboardSpace,\n          handleOnScroll: this._handleOnScroll,\n          update: this.update,\n          onScroll: Animated.forkEvent(onScroll, this._handleOnScroll),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 9\n          }\n        }));\n      }\n    }]);\n    return _class;\n  }(React.Component), _class.displayName = \"KeyboardAware\" + getDisplayName(ScrollableComponent), _class.propTypes = _objectSpread({\n    viewIsInsideTabBar: PropTypes.bool,\n    resetScrollToCoords: PropTypes.shape({\n      x: PropTypes.number.isRequired,\n      y: PropTypes.number.isRequired\n    }),\n    enableResetScrollToCoords: PropTypes.bool,\n    enableAutomaticScroll: PropTypes.bool,\n    extraHeight: PropTypes.number,\n    extraScrollHeight: PropTypes.number,\n    keyboardOpeningTime: PropTypes.number,\n    onScroll: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    update: PropTypes.func,\n    contentContainerStyle: PropTypes.any,\n    enableOnAndroid: PropTypes.bool,\n    innerRef: PropTypes.func\n  }, keyboardEventPropTypes), _class.defaultProps = {\n    enableAutomaticScroll: hocOptions.enableAutomaticScroll,\n    extraHeight: hocOptions.extraHeight,\n    extraScrollHeight: hocOptions.extraScrollHeight,\n    enableResetScrollToCoords: hocOptions.enableResetScrollToCoords,\n    keyboardOpeningTime: hocOptions.keyboardOpeningTime,\n    viewIsInsideTabBar: hocOptions.viewIsInsideTabBar,\n    enableOnAndroid: hocOptions.enableOnAndroid\n  }, _class;\n}\nvar listenToKeyboardEvents = function listenToKeyboardEvents(configOrComp) {\n  if (typeof configOrComp === 'object') {\n    return function (Comp) {\n      return KeyboardAwareHOC(Comp, configOrComp);\n    };\n  } else {\n    return KeyboardAwareHOC(configOrComp);\n  }\n};\nexport default listenToKeyboardEvents;","map":{"version":3,"names":["React","PropTypes","Keyboard","Platform","UIManager","TextInput","findNodeHandle","Animated","isIphoneX","_KAM_DEFAULT_TAB_BAR_HEIGHT","_KAM_KEYBOARD_OPENING_TIME","_KAM_EXTRA_HEIGHT","supportedKeyboardEvents","keyboardEventToCallbackName","eventName","toUpperCase","substring","keyboardEventPropTypes","reduce","acc","_objectSpread","_defineProperty","func","keyboardAwareHOCTypeEvents","Function","getDisplayName","WrappedComponent","displayName","name","ScrollIntoViewDefaultOptions","enableOnAndroid","contentContainerStyle","undefined","enableAutomaticScroll","extraHeight","extraScrollHeight","enableResetScrollToCoords","keyboardOpeningTime","viewIsInsideTabBar","refPropName","extractNativeRef","ref","getNode","KeyboardAwareHOC","ScrollableComponent","_class","userOptions","arguments","length","hocOptions","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","getScrollResponder","_rnkasv_keyboardView","scrollToPosition","x","y","animated","responder","scrollResponderScrollTo","scrollToEnd","scrollResponderScrollToEnd","scrollForExtraHeightOnAndroid","position","scrollToFocusedInput","reactNode","setTimeout","mountedComponent","scrollResponderScrollNativeHandleToKeyboard","scrollIntoView","_callee","element","options","_await$Promise$all","_await$Promise$all2","parentLayout","childLayout","getScrollPosition","_getScrollPosition","_args","_regeneratorRuntime","async","_callee$","_context","prev","next","abrupt","awrap","Promise","all","_measureElement","sent","_slicedToArray","_defaultGetScrollPosition","stop","contentOffset","Math","max","node","resolve","measureInWindow","width","height","_updateKeyboardSpace","frames","keyboardSpace","endCoordinates","setState","currentlyFocusedField","State","viewIsDescendantOf","getInnerViewNode","isAncestor","textInputBottomPosition","keyboardPosition","screenY","totalExtraHeight","OS","_scrollToFocusedInputWithNodeHandle","resetScrollToCoords","defaultResetScrollToCoords","_resetKeyboardSpace","nodeID","_handleOnScroll","e","nativeEvent","_handleRef","innerRef","update","keyboardWillShowEvent","keyboardWillHideEvent","callbacks","state","_createClass","key","value","componentDidMount","_this2","addListener","forEach","callbackName","componentDidUpdate","prevProps","componentWillUnmount","remove","Object","values","callback","render","_this$props","onScroll","newContentContainerStyle","concat","paddingBottom","refProps","createElement","_extends","keyboardDismissMode","contentInset","bottom","automaticallyAdjustContentInsets","showsVerticalScrollIndicator","scrollEventThrottle","resetKeyboardSpace","handleOnScroll","forkEvent","__source","fileName","_jsxFileName","lineNumber","columnNumber","Component","propTypes","bool","shape","number","isRequired","oneOfType","object","any","defaultProps","listenToKeyboardEvents","configOrComp","Comp"],"sources":["C:/Users/belgacem/OneDrive/Bureau/projet02/SocialApp-React-Native/node_modules/react-native-keyboard-aware-scroll-view/lib/KeyboardAwareHOC.js"],"sourcesContent":["/* @flow */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  Keyboard,\n  Platform,\n  UIManager,\n  TextInput,\n  findNodeHandle,\n  Animated\n} from 'react-native'\nimport { isIphoneX } from 'react-native-iphone-x-helper'\nimport type { KeyboardAwareInterface } from './KeyboardAwareInterface'\n\nconst _KAM_DEFAULT_TAB_BAR_HEIGHT: number = isIphoneX() ? 83 : 49\nconst _KAM_KEYBOARD_OPENING_TIME: number = 250\nconst _KAM_EXTRA_HEIGHT: number = 75\n\nconst supportedKeyboardEvents = [\n  'keyboardWillShow',\n  'keyboardDidShow',\n  'keyboardWillHide',\n  'keyboardDidHide',\n  'keyboardWillChangeFrame',\n  'keyboardDidChangeFrame'\n]\nconst keyboardEventToCallbackName = (eventName: string) =>\n  'on' + eventName[0].toUpperCase() + eventName.substring(1)\nconst keyboardEventPropTypes = supportedKeyboardEvents.reduce(\n  (acc: Object, eventName: string) => ({\n    ...acc,\n    [keyboardEventToCallbackName(eventName)]: PropTypes.func\n  }),\n  {}\n)\nconst keyboardAwareHOCTypeEvents = supportedKeyboardEvents.reduce(\n  (acc: Object, eventName: string) => ({\n    ...acc,\n    [keyboardEventToCallbackName(eventName)]: Function\n  }),\n  {}\n)\n\nexport type KeyboardAwareHOCProps = {\n  viewIsInsideTabBar?: boolean,\n  resetScrollToCoords?: {\n    x: number,\n    y: number\n  },\n  enableResetScrollToCoords?: boolean,\n  enableAutomaticScroll?: boolean,\n  extraHeight?: number,\n  extraScrollHeight?: number,\n  keyboardOpeningTime?: number,\n  onScroll?: Function,\n  update?: Function,\n  contentContainerStyle?: any,\n  enableOnAndroid?: boolean,\n  innerRef?: Function,\n  ...keyboardAwareHOCTypeEvents\n}\nexport type KeyboardAwareHOCState = {\n  keyboardSpace: number\n}\n\nexport type ElementLayout = {\n  x: number,\n  y: number,\n  width: number,\n  height: number\n}\n\nexport type ContentOffset = {\n  x: number,\n  y: number\n}\n\nexport type ScrollPosition = {\n  x: number,\n  y: number,\n  animated: boolean\n}\n\nexport type ScrollIntoViewOptions = ?{\n  getScrollPosition?: (\n    parentLayout: ElementLayout,\n    childLayout: ElementLayout,\n    contentOffset: ContentOffset\n  ) => ScrollPosition\n}\n\nexport type KeyboardAwareHOCOptions = ?{\n  enableOnAndroid: boolean,\n  contentContainerStyle: ?Object,\n  enableAutomaticScroll: boolean,\n  extraHeight: number,\n  extraScrollHeight: number,\n  enableResetScrollToCoords: boolean,\n  keyboardOpeningTime: number,\n  viewIsInsideTabBar: boolean,\n  refPropName: string,\n  extractNativeRef: Function\n}\n\nfunction getDisplayName(WrappedComponent: React$Component) {\n  return (\n    (WrappedComponent &&\n      (WrappedComponent.displayName || WrappedComponent.name)) ||\n    'Component'\n  )\n}\n\nconst ScrollIntoViewDefaultOptions: KeyboardAwareHOCOptions = {\n  enableOnAndroid: false,\n  contentContainerStyle: undefined,\n  enableAutomaticScroll: true,\n  extraHeight: _KAM_EXTRA_HEIGHT,\n  extraScrollHeight: 0,\n  enableResetScrollToCoords: true,\n  keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME,\n  viewIsInsideTabBar: false,\n\n  // The ref prop name that will be passed to the wrapped component to obtain a ref\n  // If your ScrollView is already wrapped, maybe the wrapper permit to get a ref\n  // For example, with glamorous-native ScrollView, you should use \"innerRef\"\n  refPropName: 'ref',\n  // Sometimes the ref you get is a ref to a wrapped view (ex: Animated.ScrollView)\n  // We need access to the imperative API of a real native ScrollView so we need extraction logic\n  extractNativeRef: (ref: Object) => {\n    // getNode() permit to support Animated.ScrollView automatically\n    // see https://github.com/facebook/react-native/issues/19650\n    // see https://stackoverflow.com/questions/42051368/scrollto-is-undefined-on-animated-scrollview/48786374\n    if (ref.getNode) {\n      return ref.getNode()\n    } else {\n      return ref\n    }\n  }\n}\n\nfunction KeyboardAwareHOC(\n  ScrollableComponent: React$Component,\n  userOptions: KeyboardAwareHOCOptions = {}\n) {\n  const hocOptions: KeyboardAwareHOCOptions = {\n    ...ScrollIntoViewDefaultOptions,\n    ...userOptions\n  }\n\n  return class\n    extends React.Component<KeyboardAwareHOCProps, KeyboardAwareHOCState>\n    implements KeyboardAwareInterface {\n    _rnkasv_keyboardView: any\n    keyboardWillShowEvent: ?Function\n    keyboardWillHideEvent: ?Function\n    position: ContentOffset\n    defaultResetScrollToCoords: ?{ x: number, y: number }\n    mountedComponent: boolean\n    handleOnScroll: Function\n    state: KeyboardAwareHOCState\n    static displayName = `KeyboardAware${getDisplayName(ScrollableComponent)}`\n\n    static propTypes = {\n      viewIsInsideTabBar: PropTypes.bool,\n      resetScrollToCoords: PropTypes.shape({\n        x: PropTypes.number.isRequired,\n        y: PropTypes.number.isRequired\n      }),\n      enableResetScrollToCoords: PropTypes.bool,\n      enableAutomaticScroll: PropTypes.bool,\n      extraHeight: PropTypes.number,\n      extraScrollHeight: PropTypes.number,\n      keyboardOpeningTime: PropTypes.number,\n      onScroll: PropTypes.oneOfType([\n        PropTypes.func, // Normal listener\n        PropTypes.object // Animated.event listener\n      ]),\n      update: PropTypes.func,\n      contentContainerStyle: PropTypes.any,\n      enableOnAndroid: PropTypes.bool,\n      innerRef: PropTypes.func,\n      ...keyboardEventPropTypes\n    }\n\n    // HOC options are used to init default props, so that these options can be overriden with component props\n    static defaultProps = {\n      enableAutomaticScroll: hocOptions.enableAutomaticScroll,\n      extraHeight: hocOptions.extraHeight,\n      extraScrollHeight: hocOptions.extraScrollHeight,\n      enableResetScrollToCoords: hocOptions.enableResetScrollToCoords,\n      keyboardOpeningTime: hocOptions.keyboardOpeningTime,\n      viewIsInsideTabBar: hocOptions.viewIsInsideTabBar,\n      enableOnAndroid: hocOptions.enableOnAndroid\n    }\n\n    constructor(props: KeyboardAwareHOCProps) {\n      super(props)\n      this.keyboardWillShowEvent = undefined\n      this.keyboardWillHideEvent = undefined\n      this.callbacks = {}\n      this.position = { x: 0, y: 0 }\n      this.defaultResetScrollToCoords = null\n      const keyboardSpace: number = props.viewIsInsideTabBar\n        ? _KAM_DEFAULT_TAB_BAR_HEIGHT\n        : 0\n      this.state = { keyboardSpace }\n    }\n\n    componentDidMount() {\n      this.mountedComponent = true\n      // Keyboard events\n      if (Platform.OS === 'ios') {\n        this.keyboardWillShowEvent = Keyboard.addListener(\n          'keyboardWillShow',\n          this._updateKeyboardSpace\n        )\n        this.keyboardWillHideEvent = Keyboard.addListener(\n          'keyboardWillHide',\n          this._resetKeyboardSpace\n        )\n      } else if (Platform.OS === 'android' && this.props.enableOnAndroid) {\n        this.keyboardWillShowEvent = Keyboard.addListener(\n          'keyboardDidShow',\n          this._updateKeyboardSpace\n        )\n        this.keyboardWillHideEvent = Keyboard.addListener(\n          'keyboardDidHide',\n          this._resetKeyboardSpace\n        )\n      }\n\n      supportedKeyboardEvents.forEach((eventName: string) => {\n        const callbackName = keyboardEventToCallbackName(eventName)\n        if (this.props[callbackName]) {\n          this.callbacks[eventName] = Keyboard.addListener(\n            eventName,\n            this.props[callbackName]\n          )\n        }\n      })\n    }\n\n    componentDidUpdate(prevProps: KeyboardAwareHOCProps) {\n      if (this.props.viewIsInsideTabBar !== prevProps.viewIsInsideTabBar) {\n        const keyboardSpace: number = this.props.viewIsInsideTabBar\n          ? _KAM_DEFAULT_TAB_BAR_HEIGHT\n          : 0\n        if (this.state.keyboardSpace !== keyboardSpace) {\n          this.setState({ keyboardSpace })\n        }\n      }\n    }\n\n    componentWillUnmount() {\n      this.mountedComponent = false\n      this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove()\n      this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove()\n      Object.values(this.callbacks).forEach((callback: Object) =>\n        callback.remove()\n      )\n    }\n\n    getScrollResponder = () => {\n      return (\n        this._rnkasv_keyboardView &&\n        this._rnkasv_keyboardView.getScrollResponder &&\n        this._rnkasv_keyboardView.getScrollResponder()\n      )\n    }\n\n    scrollToPosition = (x: number, y: number, animated: boolean = true) => {\n      const responder = this.getScrollResponder()\n      responder && responder.scrollResponderScrollTo({ x, y, animated })\n    }\n\n    scrollToEnd = (animated?: boolean = true) => {\n      const responder = this.getScrollResponder()\n      responder && responder.scrollResponderScrollToEnd({ animated })\n    }\n\n    scrollForExtraHeightOnAndroid = (extraHeight: number) => {\n      this.scrollToPosition(0, this.position.y + extraHeight, true)\n    }\n\n    /**\n     * @param keyboardOpeningTime: takes a different keyboardOpeningTime in consideration.\n     * @param extraHeight: takes an extra height in consideration.\n     */\n    scrollToFocusedInput = (\n      reactNode: any,\n      extraHeight?: number,\n      keyboardOpeningTime?: number\n    ) => {\n      if (extraHeight === undefined) {\n        extraHeight = this.props.extraHeight || 0\n      }\n      if (keyboardOpeningTime === undefined) {\n        keyboardOpeningTime = this.props.keyboardOpeningTime || 0\n      }\n      setTimeout(() => {\n        if (!this.mountedComponent) {\n          return\n        }\n        const responder = this.getScrollResponder()\n        responder &&\n          responder.scrollResponderScrollNativeHandleToKeyboard(\n            reactNode,\n            extraHeight,\n            true\n          )\n      }, keyboardOpeningTime)\n    }\n\n    scrollIntoView = async (\n      element: React.Element<*>,\n      options: ScrollIntoViewOptions = {}\n    ) => {\n      if (!this._rnkasv_keyboardView || !element) {\n        return\n      }\n\n      const [parentLayout, childLayout] = await Promise.all([\n        this._measureElement(this._rnkasv_keyboardView),\n        this._measureElement(element)\n      ])\n\n      const getScrollPosition =\n        options.getScrollPosition || this._defaultGetScrollPosition\n      const { x, y, animated } = getScrollPosition(\n        parentLayout,\n        childLayout,\n        this.position\n      )\n      this.scrollToPosition(x, y, animated)\n    }\n\n    _defaultGetScrollPosition = (\n      parentLayout: ElementLayout,\n      childLayout: ElementLayout,\n      contentOffset: ContentOffset\n    ): ScrollPosition => {\n      return {\n        x: 0,\n        y: Math.max(0, childLayout.y - parentLayout.y + contentOffset.y),\n        animated: true\n      }\n    }\n\n    _measureElement = (element: React.Element<*>): Promise<ElementLayout> => {\n      const node = findNodeHandle(element)\n      return new Promise((resolve: ElementLayout => void) => {\n        UIManager.measureInWindow(\n          node,\n          (x: number, y: number, width: number, height: number) => {\n            resolve({ x, y, width, height })\n          }\n        )\n      })\n    }\n\n    // Keyboard actions\n    _updateKeyboardSpace = (frames: Object) => {\n      // Automatically scroll to focused TextInput\n      if (this.props.enableAutomaticScroll) {\n        let keyboardSpace: number =\n          frames.endCoordinates.height + this.props.extraScrollHeight\n        if (this.props.viewIsInsideTabBar) {\n          keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT\n        }\n        this.setState({ keyboardSpace })\n        const currentlyFocusedField = TextInput.State.currentlyFocusedField()\n        const responder = this.getScrollResponder()\n        if (!currentlyFocusedField || !responder) {\n          return\n        }\n        UIManager.viewIsDescendantOf(\n          currentlyFocusedField,\n          responder.getInnerViewNode(),\n          (isAncestor: boolean) => {\n            if (isAncestor) {\n              // Check if the TextInput will be hidden by the keyboard\n              UIManager.measureInWindow(\n                currentlyFocusedField,\n                (x: number, y: number, width: number, height: number) => {\n                  const textInputBottomPosition = y + height\n                  const keyboardPosition = frames.endCoordinates.screenY\n                  const totalExtraHeight =\n                    this.props.extraScrollHeight + this.props.extraHeight\n                  if (Platform.OS === 'ios') {\n                    if (\n                      textInputBottomPosition >\n                      keyboardPosition - totalExtraHeight\n                    ) {\n                      this._scrollToFocusedInputWithNodeHandle(\n                        currentlyFocusedField\n                      )\n                    }\n                  } else {\n                    // On android, the system would scroll the text input just\n                    // above the keyboard so we just neet to scroll the extra\n                    // height part\n                    if (textInputBottomPosition > keyboardPosition) {\n                      // Since the system already scrolled the whole view up\n                      // we should reduce that amount\n                      keyboardSpace =\n                        keyboardSpace -\n                        (textInputBottomPosition - keyboardPosition)\n                      this.setState({ keyboardSpace })\n                      this.scrollForExtraHeightOnAndroid(totalExtraHeight)\n                    } else if (\n                      textInputBottomPosition >\n                      keyboardPosition - totalExtraHeight\n                    ) {\n                      this.scrollForExtraHeightOnAndroid(\n                        totalExtraHeight -\n                          (keyboardPosition - textInputBottomPosition)\n                      )\n                    }\n                  }\n                }\n              )\n            }\n          }\n        )\n      }\n      if (!this.props.resetScrollToCoords) {\n        if (!this.defaultResetScrollToCoords) {\n          this.defaultResetScrollToCoords = this.position\n        }\n      }\n    }\n\n    _resetKeyboardSpace = () => {\n      const keyboardSpace: number = this.props.viewIsInsideTabBar\n        ? _KAM_DEFAULT_TAB_BAR_HEIGHT\n        : 0\n      this.setState({ keyboardSpace })\n      // Reset scroll position after keyboard dismissal\n      if (this.props.enableResetScrollToCoords === false) {\n        this.defaultResetScrollToCoords = null\n        return\n      } else if (this.props.resetScrollToCoords) {\n        this.scrollToPosition(\n          this.props.resetScrollToCoords.x,\n          this.props.resetScrollToCoords.y,\n          true\n        )\n      } else {\n        if (this.defaultResetScrollToCoords) {\n          this.scrollToPosition(\n            this.defaultResetScrollToCoords.x,\n            this.defaultResetScrollToCoords.y,\n            true\n          )\n          this.defaultResetScrollToCoords = null\n        } else {\n          this.scrollToPosition(0, 0, true)\n        }\n      }\n    }\n\n    _scrollToFocusedInputWithNodeHandle = (\n      nodeID: number,\n      extraHeight?: number,\n      keyboardOpeningTime?: number\n    ) => {\n      if (extraHeight === undefined) {\n        extraHeight = this.props.extraHeight\n      }\n      const reactNode = findNodeHandle(nodeID)\n      this.scrollToFocusedInput(\n        reactNode,\n        extraHeight + this.props.extraScrollHeight,\n        keyboardOpeningTime !== undefined\n          ? keyboardOpeningTime\n          : this.props.keyboardOpeningTime || 0\n      )\n    }\n\n    _handleOnScroll = (\n      e: SyntheticEvent<*> & { nativeEvent: { contentOffset: number } }\n    ) => {\n      this.position = e.nativeEvent.contentOffset\n    }\n\n    _handleRef = (ref: React.Component<*>) => {\n      this._rnkasv_keyboardView = ref ? hocOptions.extractNativeRef(ref) : ref\n      if (this.props.innerRef) {\n        this.props.innerRef(this._rnkasv_keyboardView)\n      }\n    }\n\n    update = () => {\n      const currentlyFocusedField = TextInput.State.currentlyFocusedField()\n      const responder = this.getScrollResponder()\n\n      if (!currentlyFocusedField || !responder) {\n        return\n      }\n\n      this._scrollToFocusedInputWithNodeHandle(currentlyFocusedField)\n    }\n\n    render() {\n      const { enableOnAndroid, contentContainerStyle, onScroll } = this.props\n      let newContentContainerStyle\n      if (Platform.OS === 'android' && enableOnAndroid) {\n        newContentContainerStyle = [].concat(contentContainerStyle).concat({\n          paddingBottom:\n            ((contentContainerStyle || {}).paddingBottom || 0) +\n            this.state.keyboardSpace\n        })\n      }\n      const refProps = { [hocOptions.refPropName]: this._handleRef }\n      return (\n        <ScrollableComponent\n          {...refProps}\n          keyboardDismissMode='interactive'\n          contentInset={{ bottom: this.state.keyboardSpace }}\n          automaticallyAdjustContentInsets={false}\n          showsVerticalScrollIndicator={true}\n          scrollEventThrottle={1}\n          {...this.props}\n          contentContainerStyle={\n            newContentContainerStyle || contentContainerStyle\n          }\n          keyboardSpace={this.state.keyboardSpace}\n          getScrollResponder={this.getScrollResponder}\n          scrollToPosition={this.scrollToPosition}\n          scrollToEnd={this.scrollToEnd}\n          scrollForExtraHeightOnAndroid={this.scrollForExtraHeightOnAndroid}\n          scrollToFocusedInput={this.scrollToFocusedInput}\n          scrollIntoView={this.scrollIntoView}\n          resetKeyboardSpace={this._resetKeyboardSpace}\n          handleOnScroll={this._handleOnScroll}\n          update={this.update}\n          onScroll={Animated.forkEvent(onScroll, this._handleOnScroll)}\n        />\n      )\n    }\n  }\n}\n\n// Allow to pass options, without breaking change, and curried for composition\n// listenToKeyboardEvents(ScrollView);\n// listenToKeyboardEvents(options)(Comp);\nconst listenToKeyboardEvents = (configOrComp: any) => {\n  if (typeof configOrComp === 'object') {\n    return (Comp: Function) => KeyboardAwareHOC(Comp, configOrComp)\n  } else {\n    return KeyboardAwareHOC(configOrComp)\n  }\n}\n\nexport default listenToKeyboardEvents\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}